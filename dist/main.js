!function(Q){var I={};function B(F){if(I[F])return I[F].exports;var g=I[F]={i:F,l:!1,exports:{}};return Q[F].call(g.exports,g,g.exports,B),g.l=!0,g.exports}B.m=Q,B.c=I,B.d=function(Q,I,F){B.o(Q,I)||Object.defineProperty(Q,I,{enumerable:!0,get:F})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,I){if(1&I&&(Q=B(Q)),8&I)return Q;if(4&I&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var F=Object.create(null);if(B.r(F),Object.defineProperty(F,"default",{enumerable:!0,value:Q}),2&I&&"string"!=typeof Q)for(var g in Q)B.d(F,g,function(I){return Q[I]}.bind(null,g));return F},B.n=function(Q){var I=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(I,"a",I),I},B.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},B.p="",B(B.s=5)}([function(module,exports){eval('function loadingBar(completed, total) {\n  const elem = document.getElementById("myBar");\n  const elemText = document.getElementsByClassName("bar-percentage");\n  let width = completed / total * 100;\n\n  if (width >= 100) {\n    elem.style.width = Math.floor(width) + "%";\n    elemText[0].innerHTML = Math.floor(width) + "%";\n    elem.style.borderRadius = \'34px\';\n    return;\n  } else {\n    width++;\n    elem.style.width = Math.floor(width) + "%";\n    elemText[0].innerHTML = Math.floor(width) + "%";\n  }\n}\n\nfunction elapsedTime(start, end) {\n  const elem = document.getElementById("elapsed-time");\n  let timeDiff = end - start;\n  timeDiff /= 1000; // get seconds \n\n  let seconds = Math.round(timeDiff); // get minutes\n\n  let minutes = 0;\n  minutes = Math.floor(seconds / 60);\n\n  if (seconds === 60) {\n    seconds = 0;\n  }\n\n  elem.value = `${minutes}m ${seconds}s`;\n}\n\nlet intervalId = null;\n\nfunction timer() {\n  const elem = document.getElementById("elapsed-time");\n  let start = Date.now();\n  let minutes = 0;\n  intervalId = setInterval(function () {\n    let seconds = Date.now() - start; // milliseconds elapsed since start\n\n    seconds = Math.floor(seconds / 1000); // in seconds\n\n    minutes += Math.floor(seconds / 60);\n\n    if (seconds === 60) {\n      start = Date.now();\n      seconds = 0;\n    }\n\n    elem.value = `${minutes}m ${seconds}s`;\n  }, 1000);\n}\n\nfunction stopTimer() {\n  clearInterval(intervalId);\n}\n\nmodule.exports = {\n  loadingBar,\n  elapsedTime,\n  timer,\n  stopTimer\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZXh0cmFzL2V4dHJhcy5qcz9iNjdmIl0sIm5hbWVzIjpbImxvYWRpbmdCYXIiLCJjb21wbGV0ZWQiLCJ0b3RhbCIsImVsZW0iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZWxlbVRleHQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwid2lkdGgiLCJzdHlsZSIsIk1hdGgiLCJmbG9vciIsImlubmVySFRNTCIsImJvcmRlclJhZGl1cyIsImVsYXBzZWRUaW1lIiwic3RhcnQiLCJlbmQiLCJ0aW1lRGlmZiIsInNlY29uZHMiLCJyb3VuZCIsIm1pbnV0ZXMiLCJ2YWx1ZSIsImludGVydmFsSWQiLCJ0aW1lciIsIkRhdGUiLCJub3ciLCJzZXRJbnRlcnZhbCIsInN0b3BUaW1lciIsImNsZWFySW50ZXJ2YWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxVQUFULENBQW9CQyxTQUFwQixFQUErQkMsS0FBL0IsRUFBc0M7QUFDbEMsUUFBTUMsSUFBSSxHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsT0FBeEIsQ0FBYjtBQUNBLFFBQU1DLFFBQVEsR0FBR0YsUUFBUSxDQUFDRyxzQkFBVCxDQUFnQyxnQkFBaEMsQ0FBakI7QUFDQSxNQUFJQyxLQUFLLEdBQUlQLFNBQVMsR0FBR0MsS0FBYixHQUFzQixHQUFsQzs7QUFDQSxNQUFJTSxLQUFLLElBQUksR0FBYixFQUFrQjtBQUNkTCxRQUFJLENBQUNNLEtBQUwsQ0FBV0QsS0FBWCxHQUFtQkUsSUFBSSxDQUFDQyxLQUFMLENBQVdILEtBQVgsSUFBb0IsR0FBdkM7QUFDQUYsWUFBUSxDQUFDLENBQUQsQ0FBUixDQUFZTSxTQUFaLEdBQXdCRixJQUFJLENBQUNDLEtBQUwsQ0FBV0gsS0FBWCxJQUFvQixHQUE1QztBQUNBTCxRQUFJLENBQUNNLEtBQUwsQ0FBV0ksWUFBWCxHQUEwQixNQUExQjtBQUNBO0FBQ0gsR0FMRCxNQUtPO0FBQ0hMLFNBQUs7QUFDTEwsUUFBSSxDQUFDTSxLQUFMLENBQVdELEtBQVgsR0FBbUJFLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxLQUFYLElBQW9CLEdBQXZDO0FBQ0FGLFlBQVEsQ0FBQyxDQUFELENBQVIsQ0FBWU0sU0FBWixHQUF3QkYsSUFBSSxDQUFDQyxLQUFMLENBQVdILEtBQVgsSUFBb0IsR0FBNUM7QUFDSDtBQUNKOztBQUVELFNBQVNNLFdBQVQsQ0FBcUJDLEtBQXJCLEVBQTRCQyxHQUE1QixFQUFpQztBQUM3QixRQUFNYixJQUFJLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixjQUF4QixDQUFiO0FBQ0EsTUFBSVksUUFBUSxHQUFHRCxHQUFHLEdBQUdELEtBQXJCO0FBQ0FFLFVBQVEsSUFBSSxJQUFaLENBSDZCLENBTTdCOztBQUNBLE1BQUlDLE9BQU8sR0FBR1IsSUFBSSxDQUFDUyxLQUFMLENBQVdGLFFBQVgsQ0FBZCxDQVA2QixDQVM3Qjs7QUFDQSxNQUFJRyxPQUFPLEdBQUcsQ0FBZDtBQUNBQSxTQUFPLEdBQUdWLElBQUksQ0FBQ0MsS0FBTCxDQUFXTyxPQUFPLEdBQUcsRUFBckIsQ0FBVjs7QUFDQSxNQUFJQSxPQUFPLEtBQUssRUFBaEIsRUFBb0I7QUFDaEJBLFdBQU8sR0FBRyxDQUFWO0FBQ0g7O0FBRURmLE1BQUksQ0FBQ2tCLEtBQUwsR0FBYyxHQUFFRCxPQUFRLEtBQUlGLE9BQVEsR0FBcEM7QUFDSDs7QUFFRCxJQUFJSSxVQUFVLEdBQUcsSUFBakI7O0FBRUEsU0FBU0MsS0FBVCxHQUFpQjtBQUNiLFFBQU1wQixJQUFJLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixjQUF4QixDQUFiO0FBQ0EsTUFBSVUsS0FBSyxHQUFHUyxJQUFJLENBQUNDLEdBQUwsRUFBWjtBQUNBLE1BQUlMLE9BQU8sR0FBRyxDQUFkO0FBQ0FFLFlBQVUsR0FBR0ksV0FBVyxDQUFDLFlBQVc7QUFDaEMsUUFBSVIsT0FBTyxHQUFHTSxJQUFJLENBQUNDLEdBQUwsS0FBYVYsS0FBM0IsQ0FEZ0MsQ0FDRTs7QUFDbENHLFdBQU8sR0FBR1IsSUFBSSxDQUFDQyxLQUFMLENBQVdPLE9BQU8sR0FBRyxJQUFyQixDQUFWLENBRmdDLENBRU07O0FBQ3RDRSxXQUFPLElBQUlWLElBQUksQ0FBQ0MsS0FBTCxDQUFXTyxPQUFPLEdBQUcsRUFBckIsQ0FBWDs7QUFDQSxRQUFJQSxPQUFPLEtBQUssRUFBaEIsRUFBb0I7QUFDaEJILFdBQUssR0FBR1MsSUFBSSxDQUFDQyxHQUFMLEVBQVI7QUFDQVAsYUFBTyxHQUFHLENBQVY7QUFDSDs7QUFDRGYsUUFBSSxDQUFDa0IsS0FBTCxHQUFjLEdBQUVELE9BQVEsS0FBSUYsT0FBUSxHQUFwQztBQUNILEdBVHVCLEVBU3JCLElBVHFCLENBQXhCO0FBVUg7O0FBRUQsU0FBU1MsU0FBVCxHQUFxQjtBQUNqQkMsZUFBYSxDQUFDTixVQUFELENBQWI7QUFDSDs7QUFFRE8sTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2I5QixZQURhO0FBRWJjLGFBRmE7QUFHYlMsT0FIYTtBQUliSTtBQUphLENBQWpCIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBsb2FkaW5nQmFyKGNvbXBsZXRlZCwgdG90YWwpIHtcbiAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteUJhclwiKTtcbiAgICBjb25zdCBlbGVtVGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJiYXItcGVyY2VudGFnZVwiKTtcbiAgICBsZXQgd2lkdGggPSAoY29tcGxldGVkIC8gdG90YWwpICogMTAwO1xuICAgIGlmICh3aWR0aCA+PSAxMDApIHtcbiAgICAgICAgZWxlbS5zdHlsZS53aWR0aCA9IE1hdGguZmxvb3Iod2lkdGgpICsgXCIlXCI7XG4gICAgICAgIGVsZW1UZXh0WzBdLmlubmVySFRNTCA9IE1hdGguZmxvb3Iod2lkdGgpICsgXCIlXCI7XG4gICAgICAgIGVsZW0uc3R5bGUuYm9yZGVyUmFkaXVzID0gJzM0cHgnXG4gICAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aWR0aCsrO1xuICAgICAgICBlbGVtLnN0eWxlLndpZHRoID0gTWF0aC5mbG9vcih3aWR0aCkgKyBcIiVcIjtcbiAgICAgICAgZWxlbVRleHRbMF0uaW5uZXJIVE1MID0gTWF0aC5mbG9vcih3aWR0aCkgKyBcIiVcIjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVsYXBzZWRUaW1lKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlbGFwc2VkLXRpbWVcIik7XG4gICAgbGV0IHRpbWVEaWZmID0gZW5kIC0gc3RhcnQ7XG4gICAgdGltZURpZmYgLz0gMTAwMDtcblxuXG4gICAgLy8gZ2V0IHNlY29uZHMgXG4gICAgbGV0IHNlY29uZHMgPSBNYXRoLnJvdW5kKHRpbWVEaWZmKTtcblxuICAgIC8vIGdldCBtaW51dGVzXG4gICAgbGV0IG1pbnV0ZXMgPSAwO1xuICAgIG1pbnV0ZXMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgaWYgKHNlY29uZHMgPT09IDYwKSB7XG4gICAgICAgIHNlY29uZHMgPSAwO1xuICAgIH1cblxuICAgIGVsZW0udmFsdWUgPSBgJHttaW51dGVzfW0gJHtzZWNvbmRzfXNgO1xufVxuXG5sZXQgaW50ZXJ2YWxJZCA9IG51bGw7XG5cbmZ1bmN0aW9uIHRpbWVyKCkge1xuICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVsYXBzZWQtdGltZVwiKTtcbiAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIGxldCBtaW51dGVzID0gMDtcbiAgICBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgIGxldCBzZWNvbmRzID0gRGF0ZS5ub3coKSAtIHN0YXJ0OyAvLyBtaWxsaXNlY29uZHMgZWxhcHNlZCBzaW5jZSBzdGFydFxuICAgICAgICBzZWNvbmRzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMTAwMCk7IC8vIGluIHNlY29uZHNcbiAgICAgICAgbWludXRlcyArPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGlmIChzZWNvbmRzID09PSA2MCkge1xuICAgICAgICAgICAgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgc2Vjb25kcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbS52YWx1ZSA9IGAke21pbnV0ZXN9bSAke3NlY29uZHN9c2A7XG4gICAgfSwgMTAwMCk7XG59XG5cbmZ1bmN0aW9uIHN0b3BUaW1lcigpIHtcbiAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBsb2FkaW5nQmFyLFxuICAgIGVsYXBzZWRUaW1lLFxuICAgIHRpbWVyLFxuICAgIHN0b3BUaW1lclxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n')},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return initGlobals; });\nfunction initGlobals() {\n  const EventEmitter = __webpack_require__(6);\n\n  const events = new EventEmitter(); //set global variables\n\n  global.imageIntensityArray1d = new Array();\n  global.imageIntensityArray = new Array();\n  global.pheromoneMatrix = new Array();\n  global.heuristicMatrix = new Array();\n  global.canvasWidth = 0;\n  global.canvasHeight = 0; // get animation toggle status\n\n  global.animation = document.getElementById('animation-toggle').checked;\n  document.getElementById('animation-toggle').addEventListener('click', e => {\n    animation = e.toElement.checked;\n  }); // Parameter fields\n\n  global.allUI = document.getElementsByClassName('ui-element'); //get all user input fields\n\n  global.autoFields = true; //check if user input values are changed by the user\n\n  global.events = events;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9nbG9iYWxzLmpzPzIyZDQiXSwibmFtZXMiOlsiaW5pdEdsb2JhbHMiLCJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiZXZlbnRzIiwiZ2xvYmFsIiwiaW1hZ2VJbnRlbnNpdHlBcnJheTFkIiwiQXJyYXkiLCJpbWFnZUludGVuc2l0eUFycmF5IiwicGhlcm9tb25lTWF0cml4IiwiaGV1cmlzdGljTWF0cml4IiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJhbmltYXRpb24iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY2hlY2tlZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwidG9FbGVtZW50IiwiYWxsVUkiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiYXV0b0ZpZWxkcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxTQUFTQSxXQUFULEdBQXVCO0FBQ2xDLFFBQU1DLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyxDQUFELENBQTVCOztBQUNBLFFBQU1DLE1BQU0sR0FBRyxJQUFJRixZQUFKLEVBQWYsQ0FGa0MsQ0FJbEM7O0FBQ0FHLFFBQU0sQ0FBQ0MscUJBQVAsR0FBK0IsSUFBSUMsS0FBSixFQUEvQjtBQUNBRixRQUFNLENBQUNHLG1CQUFQLEdBQTZCLElBQUlELEtBQUosRUFBN0I7QUFDQUYsUUFBTSxDQUFDSSxlQUFQLEdBQXlCLElBQUlGLEtBQUosRUFBekI7QUFDQUYsUUFBTSxDQUFDSyxlQUFQLEdBQXlCLElBQUlILEtBQUosRUFBekI7QUFDQUYsUUFBTSxDQUFDTSxXQUFQLEdBQXFCLENBQXJCO0FBQ0FOLFFBQU0sQ0FBQ08sWUFBUCxHQUFzQixDQUF0QixDQVZrQyxDQVlsQzs7QUFDQVAsUUFBTSxDQUFDUSxTQUFQLEdBQW1CQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0Isa0JBQXhCLEVBQTRDQyxPQUEvRDtBQUNBRixVQUFRLENBQUNDLGNBQVQsQ0FBd0Isa0JBQXhCLEVBQTRDRSxnQkFBNUMsQ0FBNkQsT0FBN0QsRUFBdUVDLENBQUQsSUFBTztBQUN6RUwsYUFBUyxHQUFHSyxDQUFDLENBQUNDLFNBQUYsQ0FBWUgsT0FBeEI7QUFDSCxHQUZELEVBZGtDLENBa0JsQzs7QUFDQVgsUUFBTSxDQUFDZSxLQUFQLEdBQWVOLFFBQVEsQ0FBQ08sc0JBQVQsQ0FBZ0MsWUFBaEMsQ0FBZixDQW5Ca0MsQ0FtQjRCOztBQUM5RGhCLFFBQU0sQ0FBQ2lCLFVBQVAsR0FBb0IsSUFBcEIsQ0FwQmtDLENBb0JSOztBQUMxQmpCLFFBQU0sQ0FBQ0QsTUFBUCxHQUFnQkEsTUFBaEI7QUFDSCxDIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbml0R2xvYmFscygpIHtcbiAgICBjb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKTtcbiAgICBjb25zdCBldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICAvL3NldCBnbG9iYWwgdmFyaWFibGVzXG4gICAgZ2xvYmFsLmltYWdlSW50ZW5zaXR5QXJyYXkxZCA9IG5ldyBBcnJheSgpO1xuICAgIGdsb2JhbC5pbWFnZUludGVuc2l0eUFycmF5ID0gbmV3IEFycmF5KCk7XG4gICAgZ2xvYmFsLnBoZXJvbW9uZU1hdHJpeCA9IG5ldyBBcnJheSgpO1xuICAgIGdsb2JhbC5oZXVyaXN0aWNNYXRyaXggPSBuZXcgQXJyYXkoKTtcbiAgICBnbG9iYWwuY2FudmFzV2lkdGggPSAwO1xuICAgIGdsb2JhbC5jYW52YXNIZWlnaHQgPSAwO1xuXG4gICAgLy8gZ2V0IGFuaW1hdGlvbiB0b2dnbGUgc3RhdHVzXG4gICAgZ2xvYmFsLmFuaW1hdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbmltYXRpb24tdG9nZ2xlJykuY2hlY2tlZDtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYW5pbWF0aW9uLXRvZ2dsZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgYW5pbWF0aW9uID0gZS50b0VsZW1lbnQuY2hlY2tlZDtcbiAgICB9KTtcblxuICAgIC8vIFBhcmFtZXRlciBmaWVsZHNcbiAgICBnbG9iYWwuYWxsVUkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd1aS1lbGVtZW50Jyk7IC8vZ2V0IGFsbCB1c2VyIGlucHV0IGZpZWxkc1xuICAgIGdsb2JhbC5hdXRvRmllbGRzID0gdHJ1ZTsgLy9jaGVjayBpZiB1c2VyIGlucHV0IHZhbHVlcyBhcmUgY2hhbmdlZCBieSB0aGUgdXNlclxuICAgIGdsb2JhbC5ldmVudHMgPSBldmVudHM7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MatrixHelper; });\nclass MatrixHelper {\n  constructor() {\n    this.iMax = imageIntensityArray1d.reduce((a, b) => a + b) / imageIntensityArray1d.length;\n  }\n\n  generateInitialMatrices() {\n    global.initialPheromoneValue = 0.0001;\n\n    for (let x = 0; x < canvasWidth; x++) {\n      pheromoneMatrix[x] = [];\n      heuristicMatrix[x] = [];\n\n      for (let y = 0; y < canvasHeight; y++) {\n        pheromoneMatrix[x][y] = initialPheromoneValue;\n        heuristicMatrix[x][y] = this.heuristicInformationForPixel(x, y);\n      }\n    }\n\n    console.log('%c heuristicMatrix', 'color: #24c95a', heuristicMatrix);\n  }\n\n  resetPheromoneMatrix() {\n    for (let x = 0; x < canvasWidth; x++) {\n      pheromoneMatrix[x] = [];\n\n      for (let y = 0; y < canvasHeight; y++) {\n        pheromoneMatrix[x][y] = initialPheromoneValue;\n      }\n    }\n  }\n\n  heuristicInformationForPixel(x, y) {\n    return 1 / this.iMax * this.getMaxIntensityValueForPixel(x, y);\n  }\n\n  getMaxIntensityValueForPixel(x, y) {\n    let a, b, c, d;\n    const arrLength = imageIntensityArray.length;\n    const negI = x > 0 ? 1 : 0;\n    const negJ = y > 0 ? 1 : 0;\n    const posI = x < arrLength - 1 ? 1 : 0;\n    const posJ = y < arrLength - 1 ? 1 : 0;\n    a = Math.abs(imageIntensityArray[x - negI][y - negJ] - imageIntensityArray[x + posI][y + posJ]);\n    b = Math.abs(imageIntensityArray[x - 0][y - negJ] - imageIntensityArray[x + 0][y + posJ]);\n    c = Math.abs(imageIntensityArray[x + posI][y + posJ] - imageIntensityArray[x - negI][y - negJ]);\n    d = Math.abs(imageIntensityArray[x - negI][y - 0] - imageIntensityArray[x + posI][y + 0]);\n    return a > b ? a > c ? a > d ? a : d : c : b;\n  }\n\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9tYXRyaXgtaGVscGVyLmpzPzM3NGYiXSwibmFtZXMiOlsiTWF0cml4SGVscGVyIiwiY29uc3RydWN0b3IiLCJpTWF4IiwiaW1hZ2VJbnRlbnNpdHlBcnJheTFkIiwicmVkdWNlIiwiYSIsImIiLCJsZW5ndGgiLCJnZW5lcmF0ZUluaXRpYWxNYXRyaWNlcyIsImdsb2JhbCIsImluaXRpYWxQaGVyb21vbmVWYWx1ZSIsIngiLCJjYW52YXNXaWR0aCIsInBoZXJvbW9uZU1hdHJpeCIsImhldXJpc3RpY01hdHJpeCIsInkiLCJjYW52YXNIZWlnaHQiLCJoZXVyaXN0aWNJbmZvcm1hdGlvbkZvclBpeGVsIiwiY29uc29sZSIsImxvZyIsInJlc2V0UGhlcm9tb25lTWF0cml4IiwiZ2V0TWF4SW50ZW5zaXR5VmFsdWVGb3JQaXhlbCIsImMiLCJkIiwiYXJyTGVuZ3RoIiwiaW1hZ2VJbnRlbnNpdHlBcnJheSIsIm5lZ0kiLCJuZWdKIiwicG9zSSIsInBvc0oiLCJNYXRoIiwiYWJzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLE1BQU1BLFlBQU4sQ0FBbUI7QUFDOUJDLGFBQVcsR0FBRztBQUNWLFNBQUtDLElBQUwsR0FBWUMscUJBQXFCLENBQUNDLE1BQXRCLENBQTZCLENBQUNDLENBQUQsRUFBSUMsQ0FBSixLQUFVRCxDQUFDLEdBQUdDLENBQTNDLElBQWdESCxxQkFBcUIsQ0FBQ0ksTUFBbEY7QUFDSDs7QUFFREMseUJBQXVCLEdBQUc7QUFDdEJDLFVBQU0sQ0FBQ0MscUJBQVAsR0FBK0IsTUFBL0I7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHQyxXQUFwQixFQUFpQ0QsQ0FBQyxFQUFsQyxFQUFzQztBQUNsQ0UscUJBQWUsQ0FBQ0YsQ0FBRCxDQUFmLEdBQXFCLEVBQXJCO0FBQ0FHLHFCQUFlLENBQUNILENBQUQsQ0FBZixHQUFxQixFQUFyQjs7QUFDQSxXQUFLLElBQUlJLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdDLFlBQXBCLEVBQWtDRCxDQUFDLEVBQW5DLEVBQXVDO0FBQ25DRix1QkFBZSxDQUFDRixDQUFELENBQWYsQ0FBbUJJLENBQW5CLElBQXdCTCxxQkFBeEI7QUFDQUksdUJBQWUsQ0FBQ0gsQ0FBRCxDQUFmLENBQW1CSSxDQUFuQixJQUF3QixLQUFLRSw0QkFBTCxDQUFrQ04sQ0FBbEMsRUFBcUNJLENBQXJDLENBQXhCO0FBQ0g7QUFDSjs7QUFDREcsV0FBTyxDQUFDQyxHQUFSLENBQVksb0JBQVosRUFBa0MsZ0JBQWxDLEVBQW9ETCxlQUFwRDtBQUNIOztBQUVETSxzQkFBb0IsR0FBRTtBQUNsQixTQUFLLElBQUlULENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdDLFdBQXBCLEVBQWlDRCxDQUFDLEVBQWxDLEVBQXNDO0FBQ2xDRSxxQkFBZSxDQUFDRixDQUFELENBQWYsR0FBcUIsRUFBckI7O0FBQ0EsV0FBSyxJQUFJSSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHQyxZQUFwQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUF1QztBQUNuQ0YsdUJBQWUsQ0FBQ0YsQ0FBRCxDQUFmLENBQW1CSSxDQUFuQixJQUF3QkwscUJBQXhCO0FBQ0g7QUFDSjtBQUNKOztBQUVETyw4QkFBNEIsQ0FBQ04sQ0FBRCxFQUFJSSxDQUFKLEVBQU87QUFDL0IsV0FBTyxJQUFJLEtBQUtiLElBQVQsR0FBaUIsS0FBS21CLDRCQUFMLENBQWtDVixDQUFsQyxFQUFxQ0ksQ0FBckMsQ0FBeEI7QUFDSDs7QUFFRE0sOEJBQTRCLENBQUNWLENBQUQsRUFBSUksQ0FBSixFQUFPO0FBQy9CLFFBQUlWLENBQUosRUFBT0MsQ0FBUCxFQUFVZ0IsQ0FBVixFQUFhQyxDQUFiO0FBQ0EsVUFBTUMsU0FBUyxHQUFHQyxtQkFBbUIsQ0FBQ2xCLE1BQXRDO0FBQ0EsVUFBTW1CLElBQUksR0FBSWYsQ0FBQyxHQUFHLENBQUosR0FBUSxDQUFSLEdBQVksQ0FBMUI7QUFDQSxVQUFNZ0IsSUFBSSxHQUFJWixDQUFDLEdBQUcsQ0FBSixHQUFRLENBQVIsR0FBWSxDQUExQjtBQUNBLFVBQU1hLElBQUksR0FBSWpCLENBQUMsR0FBR2EsU0FBUyxHQUFHLENBQWhCLEdBQW9CLENBQXBCLEdBQXdCLENBQXRDO0FBQ0EsVUFBTUssSUFBSSxHQUFJZCxDQUFDLEdBQUdTLFNBQVMsR0FBRyxDQUFoQixHQUFvQixDQUFwQixHQUF3QixDQUF0QztBQUVBbkIsS0FBQyxHQUFHeUIsSUFBSSxDQUFDQyxHQUFMLENBQVNOLG1CQUFtQixDQUFDZCxDQUFDLEdBQUdlLElBQUwsQ0FBbkIsQ0FBOEJYLENBQUMsR0FBR1ksSUFBbEMsSUFBMENGLG1CQUFtQixDQUFDZCxDQUFDLEdBQUdpQixJQUFMLENBQW5CLENBQThCYixDQUFDLEdBQUdjLElBQWxDLENBQW5ELENBQUo7QUFDQXZCLEtBQUMsR0FBR3dCLElBQUksQ0FBQ0MsR0FBTCxDQUFTTixtQkFBbUIsQ0FBQ2QsQ0FBQyxHQUFHLENBQUwsQ0FBbkIsQ0FBMkJJLENBQUMsR0FBR1ksSUFBL0IsSUFBdUNGLG1CQUFtQixDQUFDZCxDQUFDLEdBQUcsQ0FBTCxDQUFuQixDQUEyQkksQ0FBQyxHQUFHYyxJQUEvQixDQUFoRCxDQUFKO0FBQ0FQLEtBQUMsR0FBR1EsSUFBSSxDQUFDQyxHQUFMLENBQVNOLG1CQUFtQixDQUFDZCxDQUFDLEdBQUdpQixJQUFMLENBQW5CLENBQThCYixDQUFDLEdBQUdjLElBQWxDLElBQTBDSixtQkFBbUIsQ0FBQ2QsQ0FBQyxHQUFHZSxJQUFMLENBQW5CLENBQThCWCxDQUFDLEdBQUdZLElBQWxDLENBQW5ELENBQUo7QUFDQUosS0FBQyxHQUFHTyxJQUFJLENBQUNDLEdBQUwsQ0FBU04sbUJBQW1CLENBQUNkLENBQUMsR0FBR2UsSUFBTCxDQUFuQixDQUE4QlgsQ0FBQyxHQUFHLENBQWxDLElBQXVDVSxtQkFBbUIsQ0FBQ2QsQ0FBQyxHQUFHaUIsSUFBTCxDQUFuQixDQUE4QmIsQ0FBQyxHQUFHLENBQWxDLENBQWhELENBQUo7QUFFQSxXQUFPVixDQUFDLEdBQUdDLENBQUosR0FBU0QsQ0FBQyxHQUFHaUIsQ0FBSixHQUFTakIsQ0FBQyxHQUFHa0IsQ0FBSixHQUFRbEIsQ0FBUixHQUFZa0IsQ0FBckIsR0FBMEJELENBQW5DLEdBQXdDaEIsQ0FBL0M7QUFDSDs7QUE3QzZCLEMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdHJpeEhlbHBlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaU1heCA9IGltYWdlSW50ZW5zaXR5QXJyYXkxZC5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKSAvIGltYWdlSW50ZW5zaXR5QXJyYXkxZC5sZW5ndGg7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVJbml0aWFsTWF0cmljZXMoKSB7XG4gICAgICAgIGdsb2JhbC5pbml0aWFsUGhlcm9tb25lVmFsdWUgPSAwLjAwMDE7XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgY2FudmFzV2lkdGg7IHgrKykge1xuICAgICAgICAgICAgcGhlcm9tb25lTWF0cml4W3hdID0gW107XG4gICAgICAgICAgICBoZXVyaXN0aWNNYXRyaXhbeF0gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgY2FudmFzSGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICAgICAgICBwaGVyb21vbmVNYXRyaXhbeF1beV0gPSBpbml0aWFsUGhlcm9tb25lVmFsdWU7XG4gICAgICAgICAgICAgICAgaGV1cmlzdGljTWF0cml4W3hdW3ldID0gdGhpcy5oZXVyaXN0aWNJbmZvcm1hdGlvbkZvclBpeGVsKHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKCclYyBoZXVyaXN0aWNNYXRyaXgnLCAnY29sb3I6ICMyNGM5NWEnLCBoZXVyaXN0aWNNYXRyaXgpO1xuICAgIH1cblxuICAgIHJlc2V0UGhlcm9tb25lTWF0cml4KCl7XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgY2FudmFzV2lkdGg7IHgrKykge1xuICAgICAgICAgICAgcGhlcm9tb25lTWF0cml4W3hdID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGNhbnZhc0hlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgcGhlcm9tb25lTWF0cml4W3hdW3ldID0gaW5pdGlhbFBoZXJvbW9uZVZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGV1cmlzdGljSW5mb3JtYXRpb25Gb3JQaXhlbCh4LCB5KSB7XG4gICAgICAgIHJldHVybiAxIC8gdGhpcy5pTWF4ICogKHRoaXMuZ2V0TWF4SW50ZW5zaXR5VmFsdWVGb3JQaXhlbCh4LCB5KSk7XG4gICAgfVxuXG4gICAgZ2V0TWF4SW50ZW5zaXR5VmFsdWVGb3JQaXhlbCh4LCB5KSB7XG4gICAgICAgIGxldCBhLCBiLCBjLCBkO1xuICAgICAgICBjb25zdCBhcnJMZW5ndGggPSBpbWFnZUludGVuc2l0eUFycmF5Lmxlbmd0aDtcbiAgICAgICAgY29uc3QgbmVnSSA9ICh4ID4gMCA/IDEgOiAwKTtcbiAgICAgICAgY29uc3QgbmVnSiA9ICh5ID4gMCA/IDEgOiAwKTtcbiAgICAgICAgY29uc3QgcG9zSSA9ICh4IDwgYXJyTGVuZ3RoIC0gMSA/IDEgOiAwKTtcbiAgICAgICAgY29uc3QgcG9zSiA9ICh5IDwgYXJyTGVuZ3RoIC0gMSA/IDEgOiAwKTtcblxuICAgICAgICBhID0gTWF0aC5hYnMoaW1hZ2VJbnRlbnNpdHlBcnJheVt4IC0gbmVnSV1beSAtIG5lZ0pdIC0gaW1hZ2VJbnRlbnNpdHlBcnJheVt4ICsgcG9zSV1beSArIHBvc0pdKTtcbiAgICAgICAgYiA9IE1hdGguYWJzKGltYWdlSW50ZW5zaXR5QXJyYXlbeCAtIDBdW3kgLSBuZWdKXSAtIGltYWdlSW50ZW5zaXR5QXJyYXlbeCArIDBdW3kgKyBwb3NKXSk7XG4gICAgICAgIGMgPSBNYXRoLmFicyhpbWFnZUludGVuc2l0eUFycmF5W3ggKyBwb3NJXVt5ICsgcG9zSl0gLSBpbWFnZUludGVuc2l0eUFycmF5W3ggLSBuZWdJXVt5IC0gbmVnSl0pO1xuICAgICAgICBkID0gTWF0aC5hYnMoaW1hZ2VJbnRlbnNpdHlBcnJheVt4IC0gbmVnSV1beSAtIDBdIC0gaW1hZ2VJbnRlbnNpdHlBcnJheVt4ICsgcG9zSV1beSArIDBdKTtcblxuICAgICAgICByZXR1cm4gYSA+IGIgPyAoYSA+IGMgPyAoYSA+IGQgPyBhIDogZCkgOiBjKSA6IGI7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EnvironmentImage; });\nclass EnvironmentImage {\n  constructor(image, canvas) {\n    this.pixelArray = this.getPixelArray(image, canvas);\n    this.width = image.width;\n    this.height = image.height;\n    this.pixelAmount = Math.abs(this.width * this.height);\n    imageIntensityArray1d = this.getIntensityArray();\n    imageIntensityArray = this.convertTo2dMatrix(imageIntensityArray1d);\n  }\n\n  convertTo2dMatrix(array) {\n    const array2d = new Array(2);\n    let a = 0;\n\n    for (let i = 0; i < canvasWidth; i++) {\n      array2d[i] = [];\n\n      for (let j = 0; j < canvasHeight; j++) {\n        array2d[i][j] = array[a];\n        a++;\n      }\n    }\n\n    return array2d;\n  }\n\n  getIntensityArray() {\n    const intensityArray = [];\n\n    for (let i = 0; i <= this.pixelArray.length - 1; i++) {\n      if (i <= this.pixelArray.length - 2) {\n        const sum = this.pixelArray[i] + this.pixelArray[i + 1] + this.pixelArray[i + 2] + this.pixelArray[i + 3];\n        i += 3;\n        intensityArray.push(sum);\n      }\n    }\n\n    ;\n    return intensityArray;\n  }\n\n  getPixelArray(image, canvas) {\n    const ctx = canvas.getContext(\'2d\');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawImageProp(ctx, image, 0, 0, canvas.width, canvas.height);\n    global.imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    fadeImage();\n    return imgData.data;\n\n    function fadeImage() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.save();\n      ctx.globalAlpha = 0.5;\n      drawImageProp(ctx, image, 0, 0, canvas.width, canvas.height);\n      ctx.restore();\n    }\n\n    function drawImageProp(ctx, img, x, y, w, h, offsetX, offsetY) {\n      if (arguments.length === 2) {\n        x = y = 0;\n        w = ctx.canvas.width;\n        h = ctx.canvas.height;\n      } // default offset is center\n\n\n      offsetX = typeof offsetX === "number" ? offsetX : 0.5;\n      offsetY = typeof offsetY === "number" ? offsetY : 0.5; // keep bounds [0.0, 1.0]\n\n      if (offsetX < 0) offsetX = 0;\n      if (offsetY < 0) offsetY = 0;\n      if (offsetX > 1) offsetX = 1;\n      if (offsetY > 1) offsetY = 1;\n      const iw = img.width,\n            ih = img.height,\n            r = Math.min(w / iw, h / ih);\n      let nw = iw * r,\n          // new prop. width\n      nh = ih * r,\n          // new prop. height\n      cx,\n          cy,\n          cw,\n          ch,\n          ar = 1; // decide which gap to fill    \n\n      if (nw < w) ar = w / nw;\n      if (Math.abs(ar - 1) < 1e-14 && nh < h) ar = h / nh; // updated\n\n      nw *= ar;\n      nh *= ar; // calc source rectangle\n\n      cw = iw / (nw / w);\n      ch = ih / (nh / h);\n      cx = (iw - cw) * offsetX;\n      cy = (ih - ch) * offsetY; // make sure source rectangle is valid\n\n      if (cx < 0) cx = 0;\n      if (cy < 0) cy = 0;\n      if (cw > iw) cw = iw;\n      if (ch > ih) ch = ih; // fill image in dest. rectangle\n\n      ctx.drawImage(img, cx, cy, cw, ch, x, y, w, h);\n    }\n  }\n\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},function(Q,I,B){B(8),Q.exports=B(7)},function(module,exports,__webpack_require__){"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnNjc3M/OTJjYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/helpers/globals.js\nvar globals = __webpack_require__(2);\n\n// EXTERNAL MODULE: ./src/helpers/matrix-helper.js\nvar matrix_helper = __webpack_require__(3);\n\n// CONCATENATED MODULE: ./src/components/aco/agent.js\nclass AntAgent {\n  constructor(canvas, coordinates) {\n    this.canvas = canvas;\n    this.startPostition = coordinates; // x,y coordinates <- this should be random\n\n    this.currentCoordinates = this.startPostition;\n    this.previousCoordinates = [];\n    this.agentSize = 1;\n  }\n\n  getRandomPosition() {\n    const x = Math.floor(Math.random() * this.canvas.width);\n    const y = Math.floor(Math.random() * this.canvas.height);\n    return {\n      x: x,\n      y: y\n    };\n  } // depositPheromone(coordinates, prevCoordin params) {\n  //     pheromoneMatrix[coordinates.x][coordinates.y] = params.nConstPD + ()\n  // }\n\n\n  depositPheromone(coordinates) {\n    const medians = [];\n    coordinates.forEach(pixel => {\n      const matrixSize = pheromoneMatrix.length - 1,\n            x = pixel.x,\n            y = pixel.y,\n            neighbourIntensities = [];\n\n      for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n          const notOutOfBounds = x + i > -1 && x + i < matrixSize && y + j > -1 && y + j < matrixSize;\n\n          if (notOutOfBounds) {\n            neighbourIntensities.push(heuristicMatrix[x + i][y + j]);\n          }\n        }\n      }\n\n      medians.push(this.calcMedian(neighbourIntensities));\n    });\n    const medDiff = medians[0] - medians[1]; // coordinates.forEach((pixel) => {\n\n    pheromoneMatrix[coordinates[0].x][coordinates[0].y] += medians[0] >= tNoiseFilt ? nConstPD + pConstPD * medDiff / 255 : 0; // });\n  }\n\n  calcMedian(arr) {\n    const mid = Math.floor(arr.length / 2),\n          nums = [...arr].sort((a, b) => a - b);\n    return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n  }\n\n  calculateNextStep() {\n    let currentMaxProbability = 0,\n        maxProbabilityIndex = 0,\n        sumProducts = 0,\n        visited = false;\n    const phProducts = [],\n          neighbourNodeCoordinates = [],\n          x = this.currentCoordinates.x,\n          y = this.currentCoordinates.y,\n          matrixSize = pheromoneMatrix.length - 1,\n          pCLen = this.previousCoordinates.length; // find the pheromone and heuristic product\n\n    for (let i = -1; i <= 1; i++) {\n      for (let j = -1; j <= 1; j++) {\n        const outOfBounds = x + i > -1 && x + i < matrixSize && y + j > -1 && y + j < matrixSize;\n        visited = false;\n\n        if (i !== 0 && j !== 0 && outOfBounds) {\n          for (let k = 1; k < (antMemLen > pCLen ? pCLen : antMemLen); k++) {\n            if (this.previousCoordinates[pCLen - k].x === x + i && this.previousCoordinates[pCLen - k].y === y + j) {\n              visited = true;\n              k = antMemLen + 1; // exit the loop to prevent agent looping\n              // k = ((antMemLen > pCLen) ? pCLen : antMemLen);\n            }\n          }\n\n          if (!visited) {\n            const productValue = Math.pow(pheromoneMatrix[x + i][y + j], alpha) * Math.pow(heuristicMatrix[x + i][y + j], beta);\n            phProducts.push(productValue); //find the sum of all products from the neighbourhood\n\n            sumProducts += productValue;\n          } else {\n            phProducts.push(\"visited\");\n          } // if (this.previousCoordinates.length > 0 && this.previousCoordinates[this.previousCoordinates.length - 1].x === x + i && this.previousCoordinates[this.previousCoordinates.length - 1].y === y + j) {\n          //     phProducts.push('visited');\n          // } else {\n          //     const productValue = Math.pow(pheromoneMatrix[x + i][y + j], alpha) * Math.pow(heuristicMatrix[x + i][y + j], beta);\n          //     phProducts.push(productValue);\n          //     //find the sum of all products from the neighbourhood\n          //     sumProducts += productValue;\n          // }\n\n\n          neighbourNodeCoordinates.push({\n            x: x + i,\n            y: y + j\n          });\n        }\n      }\n    } //find the maximum probability for next move\n\n\n    phProducts.forEach((product, i) => {\n      //check if not the previous pixel\n      let notPrevious = product !== \"visited\"; // if (!notPrevious) console.log('index', i);\n\n      const result = sumProducts !== 0 && notPrevious ? Math.abs(product / sumProducts) : 0;\n\n      if (result > currentMaxProbability && notPrevious) {\n        currentMaxProbability = result;\n        maxProbabilityIndex = i;\n      }\n    });\n\n    if (currentMaxProbability === 0) {\n      maxProbabilityIndex = 99; // const randomValue = Math.floor(Math.random() * (neighbourNodeCoordinates.length - 1));\n      // maxProbabilityIndex = (phProducts[randomValue] !== 'visited') ? randomValue : ((randomValue > 0) ? randomValue - 1 : randomValue + 1);\n    } //save current coordinates as previous\n    // console.log('maxProbabilityIndex', maxProbabilityIndex);\n    // console.log('neighbourNodeCoordinates[maxProbabilityIndex]', neighbourNodeCoordinates[maxProbabilityIndex]);\n    // console.log('neighbourNodeCoordinates', neighbourNodeCoordinates);\n\n\n    if (maxProbabilityIndex === 99) {\n      this.previousCoordinates = [];\n      const newPositions = this.getRandomPosition();\n      return {\n        newCoordinates: newPositions,\n        newAnt: true\n      };\n    } else return {\n      newCoordinates: neighbourNodeCoordinates[maxProbabilityIndex],\n      newAnt: false\n    };\n  }\n\n  moveTo(coordinates, newAnt) {\n    if (!newAnt) {\n      this.depositPheromone([this.currentCoordinates, coordinates]);\n      this.previousCoordinates.push(this.currentCoordinates);\n    } else this.previousCoordinates = [];\n\n    this.currentCoordinates = coordinates;\n  }\n\n}\n// EXTERNAL MODULE: ./src/extras/extras.js\nvar extras = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/components/aco/aco-algorithm.js\n\n\n\nclass aco_algorithm_ACO {\n  constructor(image) {\n    this.image = image;\n    this.canvas = document.querySelector('#canvasFg');\n    this.canvasW = this.canvas.getBoundingClientRect().width;\n    this.canvasH = this.canvas.getBoundingClientRect().height;\n    this.canvasArea = this.canvasW * this.canvasH;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.matrixHelper = new matrix_helper[\"a\" /* default */]();\n    this.currentFrame = 1;\n    this.animationCount = 0;\n    this.agentCount = 0;\n    this.paused = false;\n    this.resultDiv = document.querySelector(\".binary-canvas-div\"); // generate initial pheromone and heuristic matrices\n\n    this.matrixHelper.generateInitialMatrices();\n    this.iMax = this.matrixHelper.iMax;\n    this.setDefaultValues(); // set default values for the parameters\n    //for debug\n\n    this.textIter = document.querySelector('#iter-text');\n    this.textCurr = document.querySelector('#curr-text');\n    this.textNew = document.querySelector('#new-text');\n    this.textX = document.querySelector('#x-text');\n    this.textY = document.querySelector('#y-text');\n  }\n\n  init() {\n    this.ctx.clearRect(0, 0, this.canvasW, this.canvasH);\n    this.updateGlobalParams();\n    this.initializeAgents();\n    this.currentFrame = 1;\n    this.animationIntervalId = null;\n  }\n\n  reset(full) {\n    clearInterval(this.animationIntervalId);\n    Object(extras[\"stopTimer\"])();\n    this.matrixHelper.resetPheromoneMatrix();\n    if (full === 'full') this.setDefaultValues();else this.init(); // this.ctx.clearRect(0, 0, this.canvasW, this.canvasH);\n    // this.updateGlobalParams();\n    // this.currentFrame = 1;\n    // this.animationIntervalId = null;\n    // this.ctx.clearRect(0, 0, this.canvasW, this.canvasH);\n    // this.updateGlobalParams();\n    // this.initializeAgents();\n    // this.currentFrame = 1;\n  }\n\n  stop() {\n    this.paused = true;\n    clearInterval(this.animationIntervalId);\n    Object(extras[\"stopTimer\"])();\n  }\n\n  setDefaultValues() {\n    const smallImage = Math.round(Math.sqrt(this.image.width * this.image.height));\n    this.defaultParams = {\n      'iterations': 3,\n      'antCount': smallImage < 256 ? smallImage * 3 : Math.round(Math.sqrt(this.image.width * this.image.height)),\n      'numAntMov': smallImage < 256 ? 256 * 9 : Math.round(Math.round(3 * Math.sqrt(this.image.width * this.image.height))),\n      // 'antMemLen': Math.round(Math.sqrt(2 * (this.image.width + this.image.height)) / 500 * this.iMax),\n      'antMemLen': Math.round(Math.sqrt(2 * (this.image.width + this.image.height))),\n      'nConstPD': 2,\n      'pConstPD': 10,\n      'tNoiseFilt': 0.1,\n      'roPEvRate': 0.02,\n      'alpha': 2,\n      'beta': 2\n    };\n    Object.keys(this.defaultParams).forEach(key => {\n      window[key] = Number(this.defaultParams[key]);\n      window.allUI[key].value = window[key];\n    });\n  }\n\n  updateGlobalParams() {\n    Object.keys(this.defaultParams).forEach(key => {\n      window[key] = Number(window.allUI[key].value);\n    });\n    console.log('Updated iterations:', iterations);\n  }\n\n  initializeAgents() {\n    console.log('agentsCount', antCount);\n    console.log('Num Ant Movements:', numAntMov);\n    console.log('Ant memory length:', antMemLen);\n    const density = Math.round(this.canvasArea / antCount);\n    console.log('density', density);\n    console.log('cvw', this.canvasW);\n    this.agents = [];\n    console.log(\"%c pheromoneMatrix\", \"color: #24c95a\", pheromoneMatrix);\n\n    for (let i = 0; i < antCount; i++) {\n      const x = Math.floor(i * density / this.canvasW);\n      const y = i * density - x * this.canvasW;\n      this.agents[i] = new AntAgent(this.canvas, {\n        x: x,\n        y: y\n      });\n      this.ctx.fillRect(this.agents[i].currentCoordinates.y, this.agents[i].currentCoordinates.x, 2, 1);\n    }\n\n    console.log(\"%c Agents\", \"color: #24c95a\", this.agents);\n  }\n\n  startSimulation() {\n    console.log(\"%c Simulation start: \", \"color: #bada55\");\n    console.log('numant', numAntMov);\n    events.emit('start-simulation');\n    if (!this.paused) this.ctx.clearRect(0, 0, this.canvasW, this.canvasH);\n\n    if (animation) {\n      Object(extras[\"timer\"])();\n      this.animationIntervalId = setInterval(this.animateMoves.bind(this), 1);\n    } else setTimeout(() => this.noAnimationMoves(), 200);\n  }\n\n  noAnimationMoves() {\n    const start = Date.now();\n\n    for (this.currentFrame; this.currentFrame < iterations; this.currentFrame++) {\n      console.log(\"%c Iteration: \", \"color: #bada55\", this.currentFrame);\n      this.agents.forEach(agent => {\n        for (let i = 0; i < numAntMov; i++) {\n          const {\n            newCoordinates,\n            newAnt\n          } = agent.calculateNextStep();\n          agent.moveTo(newCoordinates, newAnt);\n          if (agent.currentCoordinates == undefined) console.log(\"faulty\", agent);\n          if (newAnt) i = numAntMov;\n        }\n      }); // update pheromone values\n\n      pheromoneMatrix.forEach((val, x) => {\n        val.forEach((arr, y) => {\n          this.updatePheromoneLevel(this.agents, x, y);\n        });\n      });\n    }\n\n    console.log(\"%c END ANIMATION\", \"color: #c92424\");\n    Object(extras[\"loadingBar\"])(iterations, iterations);\n    this.createBinaryImage();\n    Object(extras[\"elapsedTime\"])(start, Date.now());\n    events.emit('stop-simulation');\n  }\n\n  animateMoves() {\n    const agent = this.agents[this.agentCount];\n    this.animationCount++;\n\n    if (this.animationCount >= numAntMov) {\n      Object(extras[\"loadingBar\"])(this.agentCount + (this.agents.length - 1) * (this.currentFrame - 1), (this.agents.length - 1) * iterations);\n      this.animationCount = 0;\n      this.agentCount++; // elapsedTime(start, Date.now());\n    }\n\n    if (this.agentCount >= this.agents.length) {\n      // update pheromone values\n      pheromoneMatrix.forEach((val, x) => {\n        val.forEach((arr, y) => {\n          this.updatePheromoneLevel(this.agents, x, y);\n          this.ctx.fillStyle = `rgba(0, 255, 0, ${pheromoneMatrix[x][y]})`;\n          this.ctx.fillRect(y, x, 1, 1);\n        });\n      });\n\n      if (this.currentFrame >= iterations) {\n        console.log(\"%c END ANIMATION\", \"color: #c92424\");\n        Object(extras[\"stopTimer\"])(); // elapsedTime(start, Date.now());\n\n        this.createBinaryImage();\n        clearInterval(this.animationIntervalId);\n        events.emit('stop-simulation');\n      } else {\n        console.log(\"%c Iteration: \", \"color: #bada55\", this.currentFrame);\n        this.currentFrame++;\n        this.agentCount = 0;\n        this.animationCount = 0;\n      }\n    } else {\n      const {\n        newCoordinates,\n        newAnt\n      } = agent.calculateNextStep();\n      agent.moveTo(newCoordinates, newAnt);\n      if (agent.currentCoordinates == undefined) console.log(\"faulty\", agent);\n\n      if (this.animationCount % 10 === 0) {\n        if (pheromoneMatrix[agent.currentCoordinates.x][agent.currentCoordinates.y] <= initialPheromoneValue) {\n          this.ctx.fillStyle = `rgba(66, 33, 123, 255)`;\n        } else {\n          this.ctx.fillStyle = `rgba(237, 0, 1, 255)`;\n        }\n\n        if (agent.previousCoordinates.length > 10) {\n          for (let k = 1; k < 10; k++) {\n            this.ctx.fillRect(agent.previousCoordinates[agent.previousCoordinates.length - k].y, agent.previousCoordinates[agent.previousCoordinates.length - k].x, 1, 1);\n          }\n        }\n\n        this.ctx.fillRect(agent.currentCoordinates.y, agent.currentCoordinates.x, 1, 1);\n      }\n\n      if (newAnt) {\n        this.animationCount = numAntMov; // checks if a new ant is generated and exits loop\n      }\n    }\n\n    if (agent !== undefined) {\n      this.textIter.value = this.currentFrame;\n      this.textCurr.value = this.agentCount;\n      this.textNew.value = this.animationCount;\n      this.textX.value = agent.currentCoordinates.x;\n      this.textY.value = agent.currentCoordinates.y;\n    } // elapsedTime(start, Date.now());\n\n  }\n\n  updatePheromoneLevel(agents, x, y) {\n    let sumPheromone = 0;\n    agents.forEach(agent => {\n      if (agent.previousCoordinates[x] && agent.previousCoordinates[y]) {\n        sumPheromone += pheromoneMatrix[x][y] >= tNoiseFilt ? pheromoneMatrix[x][y] : 0;\n      }\n    });\n    const newPheromoneLevel = (1 - roPEvRate) * pheromoneMatrix[x][y] + sumPheromone;\n    pheromoneMatrix[x][y] = newPheromoneLevel;\n  }\n\n  createBinaryImage() {\n    const width = this.canvasW,\n          height = this.canvasH;\n    let buffer = new Uint8ClampedArray(width * height * 4);\n    const binaryCanvas = document.createElement(\"canvas\");\n    binaryCanvas.setAttribute(\"class\", \"binary-canvas\");\n    binaryCanvas.setAttribute(\"width\", width);\n    binaryCanvas.setAttribute(\"height\", height);\n    const binCtx = binaryCanvas.getContext(\"2d\");\n    pheromoneMatrix.forEach((arr, x) => {\n      arr.forEach((value, y) => {\n        if (value > initialPheromoneValue) {\n          const pos = (x * height + y) * 4;\n          const valueRGB = 0;\n          buffer[pos] = valueRGB; // some R value [0, 255]\n\n          buffer[pos + 1] = valueRGB; // some G value\n\n          buffer[pos + 2] = valueRGB; // some B value\n\n          buffer[pos + 3] = 255; // set alpha channel\n        }\n      });\n    }); // create imageData object\n\n    const idata = binCtx.createImageData(width, height); // set our buffer as source\n\n    idata.data.set(buffer); // update canvas with new data\n\n    binCtx.putImageData(idata, 0, 0);\n    this.resultDiv.appendChild(binaryCanvas);\n  }\n\n}\n// EXTERNAL MODULE: ./src/components/environment-image.js\nvar environment_image = __webpack_require__(4);\n\n// CONCATENATED MODULE: ./src/app.js\n\nObject(globals[\"a\" /* default */])();\n\n\nconst uploader = document.querySelector('#image-upload');\nconst app_image = document.querySelector('#image-source');\nconst imagePreview = document.querySelector('#image-preview');\nconst canvasBg = document.querySelector('#canvasBg');\nconst drawImageButton = document.querySelector('#draw-image-button');\nconst startSimulationButton = document.querySelector('#start-simulation');\nconst setDefaultsButton = document.querySelector('#defaults-button');\nconst loadingPulse = document.querySelector('.pulse');\nconst sysInfoPanel = document.querySelector('.sys-info-panel');\nconst simSettingsPanel = document.querySelector('.sim-settings-panel'); // const settingsContainers = document.querySelectorAll('.settings-pannels_container > details > div');\n\nlet envImage;\nlet algorithm; //set canvasBg dimensions\n\ncanvasWidth = canvasBg.width;\ncanvasHeight = canvasBg.clientHeight; // Buttons and HTML events\n\nconst drawImageButtonDefaultText = 'Draw Image';\nconst drawImageButtonActiveText = 'Reset';\nconst context = canvasBg.getContext('2d'); // settingsContainers.forEach((container)=>{\n//     container.classList.add('disabled');\n// });\n\nuploader.addEventListener('change', function () {\n  context.clearRect(0, 0, canvasWidth, canvasHeight);\n  drawImageButton.setAttribute('disabled', 'disabled');\n  startSimulationButton.setAttribute('disabled', 'disabled');\n  const file = this.files[0];\n\n  if (this.files && this.files.length > 0) {\n    const reader = new FileReader();\n    reader.addEventListener('load', function () {\n      app_image.setAttribute('src', this.result);\n      imagePreview.setAttribute('src', this.result);\n    });\n    reader.readAsDataURL(file);\n    drawImageButton.removeAttribute('disabled');\n    drawImageButton.innerHTML = drawImageButtonDefaultText;\n  } else {\n    app_image.setAttribute('src', '');\n    imagePreview.setAttribute('src', './assets/NoImg.png');\n  }\n});\ndrawImageButton.addEventListener('click', () => {\n  if (drawImageButton.innerHTML === drawImageButtonActiveText) {\n    events.emit('reset');\n  } else if (app_image) {\n    envImage = new environment_image[\"a\" /* default */](app_image, canvasBg);\n    algorithm = new aco_algorithm_ACO(envImage);\n    algorithm.reset();\n    startSimulationButton.removeAttribute('disabled');\n    drawImageButton.innerHTML = drawImageButtonActiveText;\n    events.emit('drawn-image');\n  }\n});\nObject.values(allUI).forEach(element => {\n  element.onchange = () => {\n    setDefaultsButton.removeAttribute('disabled');\n    startSimulationButton.removeAttribute('disabled');\n    algorithm.reset();\n  };\n});\nstartSimulationButton.addEventListener('click', () => {\n  startSimulationButton.setAttribute('disabled', 'disabled');\n  algorithm.updateGlobalParams(); // set global parameters based on user input\n\n  algorithm.startSimulation();\n});\nsetDefaultsButton.addEventListener('click', () => {\n  algorithm.reset('full');\n  setDefaultsButton.setAttribute('disabled', 'disabled');\n});\nloadingPulse.addEventListener('click', () => {\n  events.emit('stop-simulation');\n  algorithm.stop();\n});\nevents.on('start-simulation', () => {\n  startSimulationButton.style.display = 'none';\n  loadingPulse.style.display = 'block';\n  document.body.style.cursor = 'wait';\n  sysInfoPanel.setAttribute('open', 'open');\n});\nevents.on('stop-simulation', () => {\n  startSimulationButton.style.display = 'block';\n  startSimulationButton.removeAttribute('disabled');\n  loadingPulse.style.display = 'none';\n  document.body.style.cursor = 'auto';\n});\nevents.on('drawn-image', () => {\n  simSettingsPanel.setAttribute('open', 'open');\n});\nevents.on('reset', () => {\n  drawImageButton.setAttribute('disabled', 'disabled');\n  startSimulationButton.setAttribute('disabled', 'disabled');\n  drawImageButton.innerHTML = drawImageButtonDefaultText;\n  algorithm.reset('full');\n  context.clearRect(0, 0, canvasWidth, canvasHeight);\n  events.emit('stop-simulation');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n")}]);
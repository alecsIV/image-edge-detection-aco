!function(Q){var B={};function F(I){if(B[I])return B[I].exports;var g=B[I]={i:I,l:!1,exports:{}};return Q[I].call(g.exports,g,g.exports,F),g.l=!0,g.exports}F.m=Q,F.c=B,F.d=function(Q,B,I){F.o(Q,B)||Object.defineProperty(Q,B,{enumerable:!0,get:I})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,B){if(1&B&&(Q=F(Q)),8&B)return Q;if(4&B&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var I=Object.create(null);if(F.r(I),Object.defineProperty(I,"default",{enumerable:!0,value:Q}),2&B&&"string"!=typeof Q)for(var g in Q)F.d(I,g,function(B){return Q[B]}.bind(null,g));return I},F.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(B,"a",B),B},F.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},F.p="",F(F.s=5)}([function(module,exports){eval('function loadingBar(completed, total) {\n  const elem = document.getElementById("myBar");\n  const elemText = document.getElementsByClassName("bar-percentage");\n  let width = completed / total * 100;\n\n  if (width >= 100) {\n    elem.style.width = Math.floor(width) + "%";\n    elemText[0].innerHTML = Math.floor(width) + "%";\n    elem.style.borderRadius = \'34px\';\n    return;\n  } else {\n    elem.style.borderRadius = \'34px 0 0 34px\';\n    elem.style.width = Math.floor(width) + "%";\n    elemText[0].innerHTML = Math.floor(width) + "%";\n    width++;\n  }\n}\n\nfunction elapsedTime(start, end) {\n  const elem = document.getElementById("elapsed-time");\n  let timeDiff = end - start;\n  timeDiff /= 1000; // get seconds \n\n  let seconds = Math.round(timeDiff); // get minutes\n\n  let minutes = 0;\n  minutes = Math.floor(seconds / 60);\n\n  if (seconds === 60) {\n    seconds = 0;\n  }\n\n  elem.value = `${minutes}m ${seconds}s`;\n}\n\nlet intervalId = null;\nlet totalTime = 0;\nlet diff = null;\n\nfunction timer() {\n  const elem = document.getElementById("elapsed-time");\n  let start = Date.now();\n  let minutes = Math.floor(totalTime / 60000);\n  let secondsSoFar = totalTime % 60000;\n  console.log(\'timeSofar\', secondsSoFar);\n  intervalId = setInterval(function () {\n    diff = secondsSoFar + Date.now() - start; // milliseconds elapsed since start\n\n    let seconds = Math.floor(diff / 1000); // in seconds\n\n    minutes += Math.floor(seconds / 60); // in minutes\n\n    if (seconds >= 60) {\n      start = Date.now();\n      seconds = 0;\n      secondsSoFar = 0;\n    }\n\n    totalTime = diff + minutes * 60000;\n    elem.value = `${minutes}m ${seconds}s`;\n  }, 1000);\n}\n\nfunction stopTimer(pause) {\n  if (pause !== \'pause\') totalTime = 0;\n  clearInterval(intervalId); // diff = (saveTime) ? diff : null; // check if time needs to be saved\n  // console.log(\'diff\', diff);\n  // return diff; // return last time before stop\n}\n\nmodule.exports = {\n  loadingBar,\n  elapsedTime,\n  timer,\n  stopTimer\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9leHRyYXMuanM/Y2MyNSJdLCJuYW1lcyI6WyJsb2FkaW5nQmFyIiwiY29tcGxldGVkIiwidG90YWwiLCJlbGVtIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImVsZW1UZXh0IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIndpZHRoIiwic3R5bGUiLCJNYXRoIiwiZmxvb3IiLCJpbm5lckhUTUwiLCJib3JkZXJSYWRpdXMiLCJlbGFwc2VkVGltZSIsInN0YXJ0IiwiZW5kIiwidGltZURpZmYiLCJzZWNvbmRzIiwicm91bmQiLCJtaW51dGVzIiwidmFsdWUiLCJpbnRlcnZhbElkIiwidG90YWxUaW1lIiwiZGlmZiIsInRpbWVyIiwiRGF0ZSIsIm5vdyIsInNlY29uZHNTb0ZhciIsImNvbnNvbGUiLCJsb2ciLCJzZXRJbnRlcnZhbCIsInN0b3BUaW1lciIsInBhdXNlIiwiY2xlYXJJbnRlcnZhbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFVBQVQsQ0FBb0JDLFNBQXBCLEVBQStCQyxLQUEvQixFQUFzQztBQUNsQyxRQUFNQyxJQUFJLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixPQUF4QixDQUFiO0FBQ0EsUUFBTUMsUUFBUSxHQUFHRixRQUFRLENBQUNHLHNCQUFULENBQWdDLGdCQUFoQyxDQUFqQjtBQUNBLE1BQUlDLEtBQUssR0FBSVAsU0FBUyxHQUFHQyxLQUFiLEdBQXNCLEdBQWxDOztBQUNBLE1BQUlNLEtBQUssSUFBSSxHQUFiLEVBQWtCO0FBQ2RMLFFBQUksQ0FBQ00sS0FBTCxDQUFXRCxLQUFYLEdBQW1CRSxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsS0FBWCxJQUFvQixHQUF2QztBQUNBRixZQUFRLENBQUMsQ0FBRCxDQUFSLENBQVlNLFNBQVosR0FBd0JGLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxLQUFYLElBQW9CLEdBQTVDO0FBQ0FMLFFBQUksQ0FBQ00sS0FBTCxDQUFXSSxZQUFYLEdBQTBCLE1BQTFCO0FBQ0E7QUFDSCxHQUxELE1BS087QUFDSFYsUUFBSSxDQUFDTSxLQUFMLENBQVdJLFlBQVgsR0FBMEIsZUFBMUI7QUFDQVYsUUFBSSxDQUFDTSxLQUFMLENBQVdELEtBQVgsR0FBbUJFLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxLQUFYLElBQW9CLEdBQXZDO0FBQ0FGLFlBQVEsQ0FBQyxDQUFELENBQVIsQ0FBWU0sU0FBWixHQUF3QkYsSUFBSSxDQUFDQyxLQUFMLENBQVdILEtBQVgsSUFBb0IsR0FBNUM7QUFDQUEsU0FBSztBQUNSO0FBQ0o7O0FBRUQsU0FBU00sV0FBVCxDQUFxQkMsS0FBckIsRUFBNEJDLEdBQTVCLEVBQWlDO0FBQzdCLFFBQU1iLElBQUksR0FBR0MsUUFBUSxDQUFDQyxjQUFULENBQXdCLGNBQXhCLENBQWI7QUFDQSxNQUFJWSxRQUFRLEdBQUdELEdBQUcsR0FBR0QsS0FBckI7QUFDQUUsVUFBUSxJQUFJLElBQVosQ0FINkIsQ0FNN0I7O0FBQ0EsTUFBSUMsT0FBTyxHQUFHUixJQUFJLENBQUNTLEtBQUwsQ0FBV0YsUUFBWCxDQUFkLENBUDZCLENBUzdCOztBQUNBLE1BQUlHLE9BQU8sR0FBRyxDQUFkO0FBQ0FBLFNBQU8sR0FBR1YsSUFBSSxDQUFDQyxLQUFMLENBQVdPLE9BQU8sR0FBRyxFQUFyQixDQUFWOztBQUNBLE1BQUlBLE9BQU8sS0FBSyxFQUFoQixFQUFvQjtBQUNoQkEsV0FBTyxHQUFHLENBQVY7QUFDSDs7QUFFRGYsTUFBSSxDQUFDa0IsS0FBTCxHQUFjLEdBQUVELE9BQVEsS0FBSUYsT0FBUSxHQUFwQztBQUNIOztBQUVELElBQUlJLFVBQVUsR0FBRyxJQUFqQjtBQUNBLElBQUlDLFNBQVMsR0FBRyxDQUFoQjtBQUNBLElBQUlDLElBQUksR0FBRyxJQUFYOztBQUVBLFNBQVNDLEtBQVQsR0FBaUI7QUFDYixRQUFNdEIsSUFBSSxHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsY0FBeEIsQ0FBYjtBQUNBLE1BQUlVLEtBQUssR0FBR1csSUFBSSxDQUFDQyxHQUFMLEVBQVo7QUFDQSxNQUFJUCxPQUFPLEdBQUdWLElBQUksQ0FBQ0MsS0FBTCxDQUFXWSxTQUFTLEdBQUcsS0FBdkIsQ0FBZDtBQUNBLE1BQUlLLFlBQVksR0FBR0wsU0FBUyxHQUFHLEtBQS9CO0FBQ0FNLFNBQU8sQ0FBQ0MsR0FBUixDQUFZLFdBQVosRUFBeUJGLFlBQXpCO0FBQ0FOLFlBQVUsR0FBR1MsV0FBVyxDQUFDLFlBQVc7QUFDaENQLFFBQUksR0FBR0ksWUFBWSxHQUFHRixJQUFJLENBQUNDLEdBQUwsRUFBZixHQUE0QlosS0FBbkMsQ0FEZ0MsQ0FDVTs7QUFDMUMsUUFBSUcsT0FBTyxHQUFHUixJQUFJLENBQUNDLEtBQUwsQ0FBV2EsSUFBSSxHQUFHLElBQWxCLENBQWQsQ0FGZ0MsQ0FFTzs7QUFDdkNKLFdBQU8sSUFBSVYsSUFBSSxDQUFDQyxLQUFMLENBQVdPLE9BQU8sR0FBRyxFQUFyQixDQUFYLENBSGdDLENBR0s7O0FBQ3JDLFFBQUlBLE9BQU8sSUFBSSxFQUFmLEVBQW1CO0FBQ2ZILFdBQUssR0FBR1csSUFBSSxDQUFDQyxHQUFMLEVBQVI7QUFDQVQsYUFBTyxHQUFHLENBQVY7QUFDQVUsa0JBQVksR0FBRyxDQUFmO0FBQ0g7O0FBQ0RMLGFBQVMsR0FBR0MsSUFBSSxHQUFJSixPQUFPLEdBQUcsS0FBOUI7QUFDQWpCLFFBQUksQ0FBQ2tCLEtBQUwsR0FBYyxHQUFFRCxPQUFRLEtBQUlGLE9BQVEsR0FBcEM7QUFDSCxHQVh1QixFQVdyQixJQVhxQixDQUF4QjtBQVlIOztBQUVELFNBQVNjLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQ3RCLE1BQUlBLEtBQUssS0FBSyxPQUFkLEVBQXVCVixTQUFTLEdBQUcsQ0FBWjtBQUN2QlcsZUFBYSxDQUFDWixVQUFELENBQWIsQ0FGc0IsQ0FHdEI7QUFDQTtBQUNBO0FBQ0g7O0FBRURhLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNicEMsWUFEYTtBQUViYyxhQUZhO0FBR2JXLE9BSGE7QUFJYk87QUFKYSxDQUFqQiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbG9hZGluZ0Jhcihjb21wbGV0ZWQsIHRvdGFsKSB7XHJcbiAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteUJhclwiKTtcclxuICAgIGNvbnN0IGVsZW1UZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJhci1wZXJjZW50YWdlXCIpO1xyXG4gICAgbGV0IHdpZHRoID0gKGNvbXBsZXRlZCAvIHRvdGFsKSAqIDEwMDtcclxuICAgIGlmICh3aWR0aCA+PSAxMDApIHtcclxuICAgICAgICBlbGVtLnN0eWxlLndpZHRoID0gTWF0aC5mbG9vcih3aWR0aCkgKyBcIiVcIjtcclxuICAgICAgICBlbGVtVGV4dFswXS5pbm5lckhUTUwgPSBNYXRoLmZsb29yKHdpZHRoKSArIFwiJVwiO1xyXG4gICAgICAgIGVsZW0uc3R5bGUuYm9yZGVyUmFkaXVzID0gJzM0cHgnXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBlbGVtLnN0eWxlLmJvcmRlclJhZGl1cyA9ICczNHB4IDAgMCAzNHB4JztcclxuICAgICAgICBlbGVtLnN0eWxlLndpZHRoID0gTWF0aC5mbG9vcih3aWR0aCkgKyBcIiVcIjtcclxuICAgICAgICBlbGVtVGV4dFswXS5pbm5lckhUTUwgPSBNYXRoLmZsb29yKHdpZHRoKSArIFwiJVwiO1xyXG4gICAgICAgIHdpZHRoKys7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVsYXBzZWRUaW1lKHN0YXJ0LCBlbmQpIHtcclxuICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVsYXBzZWQtdGltZVwiKTtcclxuICAgIGxldCB0aW1lRGlmZiA9IGVuZCAtIHN0YXJ0O1xyXG4gICAgdGltZURpZmYgLz0gMTAwMDtcclxuXHJcblxyXG4gICAgLy8gZ2V0IHNlY29uZHMgXHJcbiAgICBsZXQgc2Vjb25kcyA9IE1hdGgucm91bmQodGltZURpZmYpO1xyXG5cclxuICAgIC8vIGdldCBtaW51dGVzXHJcbiAgICBsZXQgbWludXRlcyA9IDA7XHJcbiAgICBtaW51dGVzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApO1xyXG4gICAgaWYgKHNlY29uZHMgPT09IDYwKSB7XHJcbiAgICAgICAgc2Vjb25kcyA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgZWxlbS52YWx1ZSA9IGAke21pbnV0ZXN9bSAke3NlY29uZHN9c2A7XHJcbn1cclxuXHJcbmxldCBpbnRlcnZhbElkID0gbnVsbDtcclxubGV0IHRvdGFsVGltZSA9IDA7XHJcbmxldCBkaWZmID0gbnVsbDtcclxuXHJcbmZ1bmN0aW9uIHRpbWVyKCkge1xyXG4gICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZWxhcHNlZC10aW1lXCIpO1xyXG4gICAgbGV0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgIGxldCBtaW51dGVzID0gTWF0aC5mbG9vcih0b3RhbFRpbWUgLyA2MDAwMCk7XHJcbiAgICBsZXQgc2Vjb25kc1NvRmFyID0gdG90YWxUaW1lICUgNjAwMDA7XHJcbiAgICBjb25zb2xlLmxvZygndGltZVNvZmFyJywgc2Vjb25kc1NvRmFyKTtcclxuICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcclxuICAgICAgICBkaWZmID0gc2Vjb25kc1NvRmFyICsgRGF0ZS5ub3coKSAtIHN0YXJ0OyAvLyBtaWxsaXNlY29uZHMgZWxhcHNlZCBzaW5jZSBzdGFydFxyXG4gICAgICAgIGxldCBzZWNvbmRzID0gTWF0aC5mbG9vcihkaWZmIC8gMTAwMCk7IC8vIGluIHNlY29uZHNcclxuICAgICAgICBtaW51dGVzICs9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKTsgLy8gaW4gbWludXRlc1xyXG4gICAgICAgIGlmIChzZWNvbmRzID49IDYwKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgc2Vjb25kcyA9IDA7XHJcbiAgICAgICAgICAgIHNlY29uZHNTb0ZhciA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvdGFsVGltZSA9IGRpZmYgKyAobWludXRlcyAqIDYwMDAwKTtcclxuICAgICAgICBlbGVtLnZhbHVlID0gYCR7bWludXRlc31tICR7c2Vjb25kc31zYDtcclxuICAgIH0sIDEwMDApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdG9wVGltZXIocGF1c2UpIHtcclxuICAgIGlmIChwYXVzZSAhPT0gJ3BhdXNlJykgdG90YWxUaW1lID0gMDtcclxuICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XHJcbiAgICAvLyBkaWZmID0gKHNhdmVUaW1lKSA/IGRpZmYgOiBudWxsOyAvLyBjaGVjayBpZiB0aW1lIG5lZWRzIHRvIGJlIHNhdmVkXHJcbiAgICAvLyBjb25zb2xlLmxvZygnZGlmZicsIGRpZmYpO1xyXG4gICAgLy8gcmV0dXJuIGRpZmY7IC8vIHJldHVybiBsYXN0IHRpbWUgYmVmb3JlIHN0b3BcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBsb2FkaW5nQmFyLFxyXG4gICAgZWxhcHNlZFRpbWUsXHJcbiAgICB0aW1lcixcclxuICAgIHN0b3BUaW1lclxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n')},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return initGlobals; });\n// The following function returns all the global variables needed throughtout the script\nfunction initGlobals() {\n  const EventEmitter = __webpack_require__(6);\n\n  const events = new EventEmitter();\n  global.events = events; // used to call js events to better manage the stages of the program\n  //set global variables related to the matrices\n\n  global.imageIntensityArray1d = new Array();\n  global.imageIntensityArray = new Array();\n  global.pheromoneMatrix = new Array();\n  global.heuristicMatrix = new Array();\n  global.canvasWidth = 0;\n  global.canvasHeight = 0; // get animation toggle status\n\n  global.animationElem = document.getElementById('animation-toggle');\n  global.animationLabel = document.querySelector('.animation-toggle_label');\n  animationLabel.innerHTML = 'Animation on';\n  global.animation = animationElem.checked;\n  animationElem.addEventListener('click', e => {\n    animation = e.target.checked;\n    animationLabel.innerHTML = `Animation ${animation ? 'on' : 'off'}`;\n    events.emit('animation-toggled', animation);\n  }); // Parameter fields values\n\n  global.allUI = document.getElementsByClassName('ui-element'); //get all user input fields\n\n  global.autoFields = true; //check if user input values are changed by the user\n\n  global.currentParams = {}; // Results Gallery params\n\n  global.pages = [];\n  global.currentPage = 0;\n  global.previousPage = -1;\n  global.savedParams = [];\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9nbG9iYWxzLmpzPzIyZDQiXSwibmFtZXMiOlsiaW5pdEdsb2JhbHMiLCJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiZXZlbnRzIiwiZ2xvYmFsIiwiaW1hZ2VJbnRlbnNpdHlBcnJheTFkIiwiQXJyYXkiLCJpbWFnZUludGVuc2l0eUFycmF5IiwicGhlcm9tb25lTWF0cml4IiwiaGV1cmlzdGljTWF0cml4IiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJhbmltYXRpb25FbGVtIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFuaW1hdGlvbkxhYmVsIiwicXVlcnlTZWxlY3RvciIsImlubmVySFRNTCIsImFuaW1hdGlvbiIsImNoZWNrZWQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInRhcmdldCIsImVtaXQiLCJhbGxVSSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhdXRvRmllbGRzIiwiY3VycmVudFBhcmFtcyIsInBhZ2VzIiwiY3VycmVudFBhZ2UiLCJwcmV2aW91c1BhZ2UiLCJzYXZlZFBhcmFtcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNlLFNBQVNBLFdBQVQsR0FBdUI7QUFDbEMsUUFBTUMsWUFBWSxHQUFHQyxtQkFBTyxDQUFDLENBQUQsQ0FBNUI7O0FBQ0EsUUFBTUMsTUFBTSxHQUFHLElBQUlGLFlBQUosRUFBZjtBQUVBRyxRQUFNLENBQUNELE1BQVAsR0FBZ0JBLE1BQWhCLENBSmtDLENBSVY7QUFFeEI7O0FBQ0FDLFFBQU0sQ0FBQ0MscUJBQVAsR0FBK0IsSUFBSUMsS0FBSixFQUEvQjtBQUNBRixRQUFNLENBQUNHLG1CQUFQLEdBQTZCLElBQUlELEtBQUosRUFBN0I7QUFDQUYsUUFBTSxDQUFDSSxlQUFQLEdBQXlCLElBQUlGLEtBQUosRUFBekI7QUFDQUYsUUFBTSxDQUFDSyxlQUFQLEdBQXlCLElBQUlILEtBQUosRUFBekI7QUFDQUYsUUFBTSxDQUFDTSxXQUFQLEdBQXFCLENBQXJCO0FBQ0FOLFFBQU0sQ0FBQ08sWUFBUCxHQUFzQixDQUF0QixDQVprQyxDQWNsQzs7QUFDQVAsUUFBTSxDQUFDUSxhQUFQLEdBQXVCQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0Isa0JBQXhCLENBQXZCO0FBQ0FWLFFBQU0sQ0FBQ1csY0FBUCxHQUF3QkYsUUFBUSxDQUFDRyxhQUFULENBQXVCLHlCQUF2QixDQUF4QjtBQUNBRCxnQkFBYyxDQUFDRSxTQUFmLEdBQTJCLGNBQTNCO0FBQ0FiLFFBQU0sQ0FBQ2MsU0FBUCxHQUFtQk4sYUFBYSxDQUFDTyxPQUFqQztBQUVBUCxlQUFhLENBQUNRLGdCQUFkLENBQStCLE9BQS9CLEVBQXlDQyxDQUFELElBQU87QUFDM0NILGFBQVMsR0FBR0csQ0FBQyxDQUFDQyxNQUFGLENBQVNILE9BQXJCO0FBQ0FKLGtCQUFjLENBQUNFLFNBQWYsR0FBNEIsYUFBYUMsU0FBRCxHQUFjLElBQWQsR0FBb0IsS0FBTSxFQUFsRTtBQUNBZixVQUFNLENBQUNvQixJQUFQLENBQVksbUJBQVosRUFBaUNMLFNBQWpDO0FBQ0gsR0FKRCxFQXBCa0MsQ0EwQmxDOztBQUNBZCxRQUFNLENBQUNvQixLQUFQLEdBQWVYLFFBQVEsQ0FBQ1ksc0JBQVQsQ0FBZ0MsWUFBaEMsQ0FBZixDQTNCa0MsQ0EyQjRCOztBQUM5RHJCLFFBQU0sQ0FBQ3NCLFVBQVAsR0FBb0IsSUFBcEIsQ0E1QmtDLENBNEJSOztBQUMxQnRCLFFBQU0sQ0FBQ3VCLGFBQVAsR0FBdUIsRUFBdkIsQ0E3QmtDLENBK0JsQzs7QUFDQXZCLFFBQU0sQ0FBQ3dCLEtBQVAsR0FBZSxFQUFmO0FBQ0F4QixRQUFNLENBQUN5QixXQUFQLEdBQXFCLENBQXJCO0FBQ0F6QixRQUFNLENBQUMwQixZQUFQLEdBQXNCLENBQUMsQ0FBdkI7QUFDQTFCLFFBQU0sQ0FBQzJCLFdBQVAsR0FBcUIsRUFBckI7QUFDSCxDIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgZm9sbG93aW5nIGZ1bmN0aW9uIHJldHVybnMgYWxsIHRoZSBnbG9iYWwgdmFyaWFibGVzIG5lZWRlZCB0aHJvdWdodG91dCB0aGUgc2NyaXB0XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXRHbG9iYWxzKCkge1xyXG4gICAgY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XHJcbiAgICBjb25zdCBldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgZ2xvYmFsLmV2ZW50cyA9IGV2ZW50czsgLy8gdXNlZCB0byBjYWxsIGpzIGV2ZW50cyB0byBiZXR0ZXIgbWFuYWdlIHRoZSBzdGFnZXMgb2YgdGhlIHByb2dyYW1cclxuXHJcbiAgICAvL3NldCBnbG9iYWwgdmFyaWFibGVzIHJlbGF0ZWQgdG8gdGhlIG1hdHJpY2VzXHJcbiAgICBnbG9iYWwuaW1hZ2VJbnRlbnNpdHlBcnJheTFkID0gbmV3IEFycmF5KCk7XHJcbiAgICBnbG9iYWwuaW1hZ2VJbnRlbnNpdHlBcnJheSA9IG5ldyBBcnJheSgpO1xyXG4gICAgZ2xvYmFsLnBoZXJvbW9uZU1hdHJpeCA9IG5ldyBBcnJheSgpO1xyXG4gICAgZ2xvYmFsLmhldXJpc3RpY01hdHJpeCA9IG5ldyBBcnJheSgpO1xyXG4gICAgZ2xvYmFsLmNhbnZhc1dpZHRoID0gMDtcclxuICAgIGdsb2JhbC5jYW52YXNIZWlnaHQgPSAwO1xyXG5cclxuICAgIC8vIGdldCBhbmltYXRpb24gdG9nZ2xlIHN0YXR1c1xyXG4gICAgZ2xvYmFsLmFuaW1hdGlvbkVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYW5pbWF0aW9uLXRvZ2dsZScpO1xyXG4gICAgZ2xvYmFsLmFuaW1hdGlvbkxhYmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFuaW1hdGlvbi10b2dnbGVfbGFiZWwnKTtcclxuICAgIGFuaW1hdGlvbkxhYmVsLmlubmVySFRNTCA9ICdBbmltYXRpb24gb24nO1xyXG4gICAgZ2xvYmFsLmFuaW1hdGlvbiA9IGFuaW1hdGlvbkVsZW0uY2hlY2tlZDtcclxuXHJcbiAgICBhbmltYXRpb25FbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBhbmltYXRpb24gPSBlLnRhcmdldC5jaGVja2VkO1xyXG4gICAgICAgIGFuaW1hdGlvbkxhYmVsLmlubmVySFRNTCA9IGBBbmltYXRpb24gJHsoYW5pbWF0aW9uKSA/ICdvbic6ICdvZmYnfWBcclxuICAgICAgICBldmVudHMuZW1pdCgnYW5pbWF0aW9uLXRvZ2dsZWQnLCBhbmltYXRpb24pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUGFyYW1ldGVyIGZpZWxkcyB2YWx1ZXNcclxuICAgIGdsb2JhbC5hbGxVSSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3VpLWVsZW1lbnQnKTsgLy9nZXQgYWxsIHVzZXIgaW5wdXQgZmllbGRzXHJcbiAgICBnbG9iYWwuYXV0b0ZpZWxkcyA9IHRydWU7IC8vY2hlY2sgaWYgdXNlciBpbnB1dCB2YWx1ZXMgYXJlIGNoYW5nZWQgYnkgdGhlIHVzZXJcclxuICAgIGdsb2JhbC5jdXJyZW50UGFyYW1zID0ge307XHJcblxyXG4gICAgLy8gUmVzdWx0cyBHYWxsZXJ5IHBhcmFtc1xyXG4gICAgZ2xvYmFsLnBhZ2VzID0gW107XHJcbiAgICBnbG9iYWwuY3VycmVudFBhZ2UgPSAwO1xyXG4gICAgZ2xvYmFsLnByZXZpb3VzUGFnZSA9IC0xO1xyXG4gICAgZ2xvYmFsLnNhdmVkUGFyYW1zID0gW107XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MatrixHelper; });\nclass MatrixHelper {\n  constructor() {\n    this.iMax = imageIntensityArray1d.reduce((a, b) => a + b) / imageIntensityArray1d.length;\n  }\n\n  generateInitialMatrices() {\n    global.initialPheromoneValue = 0.0001;\n\n    for (let x = 0; x < canvasHeight; x++) {\n      pheromoneMatrix[x] = [];\n      heuristicMatrix[x] = [];\n\n      for (let y = 0; y < canvasWidth; y++) {\n        pheromoneMatrix[x][y] = initialPheromoneValue;\n        heuristicMatrix[x][y] = this.heuristicInformationForPixel(x, y);\n      }\n    }\n\n    console.log('%c heuristicMatrix', 'color: #24c95a', heuristicMatrix);\n  }\n\n  resetPheromoneMatrix() {\n    for (let x = 0; x < canvasHeight; x++) {\n      pheromoneMatrix[x] = [];\n\n      for (let y = 0; y < canvasWidth; y++) {\n        pheromoneMatrix[x][y] = initialPheromoneValue;\n      }\n    }\n  }\n\n  heuristicInformationForPixel(x, y) {\n    return 1 / this.iMax * this.getMaxIntensityValueForPixel(x, y);\n  }\n\n  getMaxIntensityValueForPixel(x, y) {\n    const arrLength = imageIntensityArray.length - 1;\n    const neighbourhoodIntensities = [];\n\n    for (let u = 0; u <= 2; u++) {\n      for (let v = -2; v <= 2; v++) {\n        const boundX = x > 1 ? x < arrLength - 1 ? u : 0 : 0;\n        const boundY = y > 1 ? y < arrLength - 1 ? v : 0 : 0;\n        neighbourhoodIntensities.push(Math.abs(imageIntensityArray[x - boundX][y - boundY] - imageIntensityArray[x + boundX][y + boundY]));\n      }\n    }\n\n    return Math.max(...neighbourhoodIntensities);\n  }\n\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9tYXRyaXgtaGVscGVyLmpzPzM3NGYiXSwibmFtZXMiOlsiTWF0cml4SGVscGVyIiwiY29uc3RydWN0b3IiLCJpTWF4IiwiaW1hZ2VJbnRlbnNpdHlBcnJheTFkIiwicmVkdWNlIiwiYSIsImIiLCJsZW5ndGgiLCJnZW5lcmF0ZUluaXRpYWxNYXRyaWNlcyIsImdsb2JhbCIsImluaXRpYWxQaGVyb21vbmVWYWx1ZSIsIngiLCJjYW52YXNIZWlnaHQiLCJwaGVyb21vbmVNYXRyaXgiLCJoZXVyaXN0aWNNYXRyaXgiLCJ5IiwiY2FudmFzV2lkdGgiLCJoZXVyaXN0aWNJbmZvcm1hdGlvbkZvclBpeGVsIiwiY29uc29sZSIsImxvZyIsInJlc2V0UGhlcm9tb25lTWF0cml4IiwiZ2V0TWF4SW50ZW5zaXR5VmFsdWVGb3JQaXhlbCIsImFyckxlbmd0aCIsImltYWdlSW50ZW5zaXR5QXJyYXkiLCJuZWlnaGJvdXJob29kSW50ZW5zaXRpZXMiLCJ1IiwidiIsImJvdW5kWCIsImJvdW5kWSIsInB1c2giLCJNYXRoIiwiYWJzIiwibWF4Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLE1BQU1BLFlBQU4sQ0FBbUI7QUFDOUJDLGFBQVcsR0FBRztBQUNWLFNBQUtDLElBQUwsR0FBWUMscUJBQXFCLENBQUNDLE1BQXRCLENBQTZCLENBQUNDLENBQUQsRUFBSUMsQ0FBSixLQUFVRCxDQUFDLEdBQUdDLENBQTNDLElBQWdESCxxQkFBcUIsQ0FBQ0ksTUFBbEY7QUFDSDs7QUFFREMseUJBQXVCLEdBQUc7QUFDdEJDLFVBQU0sQ0FBQ0MscUJBQVAsR0FBK0IsTUFBL0I7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHQyxZQUFwQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUF1QztBQUNuQ0UscUJBQWUsQ0FBQ0YsQ0FBRCxDQUFmLEdBQXFCLEVBQXJCO0FBQ0FHLHFCQUFlLENBQUNILENBQUQsQ0FBZixHQUFxQixFQUFyQjs7QUFDQSxXQUFLLElBQUlJLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdDLFdBQXBCLEVBQWlDRCxDQUFDLEVBQWxDLEVBQXNDO0FBQ2xDRix1QkFBZSxDQUFDRixDQUFELENBQWYsQ0FBbUJJLENBQW5CLElBQXdCTCxxQkFBeEI7QUFDQUksdUJBQWUsQ0FBQ0gsQ0FBRCxDQUFmLENBQW1CSSxDQUFuQixJQUF3QixLQUFLRSw0QkFBTCxDQUFrQ04sQ0FBbEMsRUFBcUNJLENBQXJDLENBQXhCO0FBQ0g7QUFDSjs7QUFDREcsV0FBTyxDQUFDQyxHQUFSLENBQVksb0JBQVosRUFBa0MsZ0JBQWxDLEVBQW9ETCxlQUFwRDtBQUNIOztBQUVETSxzQkFBb0IsR0FBRztBQUNuQixTQUFLLElBQUlULENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdDLFlBQXBCLEVBQWtDRCxDQUFDLEVBQW5DLEVBQXVDO0FBQ25DRSxxQkFBZSxDQUFDRixDQUFELENBQWYsR0FBcUIsRUFBckI7O0FBQ0EsV0FBSyxJQUFJSSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHQyxXQUFwQixFQUFpQ0QsQ0FBQyxFQUFsQyxFQUFzQztBQUNsQ0YsdUJBQWUsQ0FBQ0YsQ0FBRCxDQUFmLENBQW1CSSxDQUFuQixJQUF3QkwscUJBQXhCO0FBQ0g7QUFDSjtBQUNKOztBQUVETyw4QkFBNEIsQ0FBQ04sQ0FBRCxFQUFJSSxDQUFKLEVBQU87QUFDL0IsV0FBUSxJQUFJLEtBQUtiLElBQVYsR0FBbUIsS0FBS21CLDRCQUFMLENBQWtDVixDQUFsQyxFQUFxQ0ksQ0FBckMsQ0FBMUI7QUFDSDs7QUFFRE0sOEJBQTRCLENBQUNWLENBQUQsRUFBSUksQ0FBSixFQUFPO0FBQy9CLFVBQU1PLFNBQVMsR0FBR0MsbUJBQW1CLENBQUNoQixNQUFwQixHQUE2QixDQUEvQztBQUNBLFVBQU1pQix3QkFBd0IsR0FBRyxFQUFqQzs7QUFFQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLElBQUksQ0FBckIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDekIsV0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxDQUFkLEVBQWlCQSxDQUFDLElBQUksQ0FBdEIsRUFBeUJBLENBQUMsRUFBMUIsRUFBOEI7QUFDMUIsY0FBTUMsTUFBTSxHQUFJaEIsQ0FBQyxHQUFHLENBQUosR0FBVUEsQ0FBQyxHQUFHVyxTQUFTLEdBQUcsQ0FBakIsR0FBcUJHLENBQXJCLEdBQXlCLENBQWxDLEdBQXVDLENBQXZEO0FBQ0EsY0FBTUcsTUFBTSxHQUFJYixDQUFDLEdBQUcsQ0FBSixHQUFVQSxDQUFDLEdBQUdPLFNBQVMsR0FBRyxDQUFqQixHQUFxQkksQ0FBckIsR0FBeUIsQ0FBbEMsR0FBdUMsQ0FBdkQ7QUFDQUYsZ0NBQXdCLENBQUNLLElBQXpCLENBQThCQyxJQUFJLENBQUNDLEdBQUwsQ0FBU1IsbUJBQW1CLENBQUNaLENBQUMsR0FBR2dCLE1BQUwsQ0FBbkIsQ0FBZ0NaLENBQUMsR0FBR2EsTUFBcEMsSUFBOENMLG1CQUFtQixDQUFDWixDQUFDLEdBQUdnQixNQUFMLENBQW5CLENBQWdDWixDQUFDLEdBQUdhLE1BQXBDLENBQXZELENBQTlCO0FBQ0g7QUFDSjs7QUFDRCxXQUFPRSxJQUFJLENBQUNFLEdBQUwsQ0FBUyxHQUFHUix3QkFBWixDQUFQO0FBQ0g7O0FBM0M2QixDIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBNYXRyaXhIZWxwZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5pTWF4ID0gaW1hZ2VJbnRlbnNpdHlBcnJheTFkLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpIC8gaW1hZ2VJbnRlbnNpdHlBcnJheTFkLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZUluaXRpYWxNYXRyaWNlcygpIHtcclxuICAgICAgICBnbG9iYWwuaW5pdGlhbFBoZXJvbW9uZVZhbHVlID0gMC4wMDAxO1xyXG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgY2FudmFzSGVpZ2h0OyB4KyspIHtcclxuICAgICAgICAgICAgcGhlcm9tb25lTWF0cml4W3hdID0gW107XHJcbiAgICAgICAgICAgIGhldXJpc3RpY01hdHJpeFt4XSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGNhbnZhc1dpZHRoOyB5KyspIHtcclxuICAgICAgICAgICAgICAgIHBoZXJvbW9uZU1hdHJpeFt4XVt5XSA9IGluaXRpYWxQaGVyb21vbmVWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGhldXJpc3RpY01hdHJpeFt4XVt5XSA9IHRoaXMuaGV1cmlzdGljSW5mb3JtYXRpb25Gb3JQaXhlbCh4LCB5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZygnJWMgaGV1cmlzdGljTWF0cml4JywgJ2NvbG9yOiAjMjRjOTVhJywgaGV1cmlzdGljTWF0cml4KTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldFBoZXJvbW9uZU1hdHJpeCgpIHtcclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGNhbnZhc0hlaWdodDsgeCsrKSB7XHJcbiAgICAgICAgICAgIHBoZXJvbW9uZU1hdHJpeFt4XSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGNhbnZhc1dpZHRoOyB5KyspIHtcclxuICAgICAgICAgICAgICAgIHBoZXJvbW9uZU1hdHJpeFt4XVt5XSA9IGluaXRpYWxQaGVyb21vbmVWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoZXVyaXN0aWNJbmZvcm1hdGlvbkZvclBpeGVsKHgsIHkpIHtcclxuICAgICAgICByZXR1cm4gKDEgLyB0aGlzLmlNYXgpICogKHRoaXMuZ2V0TWF4SW50ZW5zaXR5VmFsdWVGb3JQaXhlbCh4LCB5KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWF4SW50ZW5zaXR5VmFsdWVGb3JQaXhlbCh4LCB5KSB7XHJcbiAgICAgICAgY29uc3QgYXJyTGVuZ3RoID0gaW1hZ2VJbnRlbnNpdHlBcnJheS5sZW5ndGggLSAxO1xyXG4gICAgICAgIGNvbnN0IG5laWdoYm91cmhvb2RJbnRlbnNpdGllcyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCB1ID0gMDsgdSA8PSAyOyB1KyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgdiA9IC0yOyB2IDw9IDI7IHYrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYm91bmRYID0gKHggPiAxID8gKCh4IDwgYXJyTGVuZ3RoIC0gMSk/IHUgOiAwKSA6IDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYm91bmRZID0gKHkgPiAxID8gKCh5IDwgYXJyTGVuZ3RoIC0gMSk/IHYgOiAwKSA6IDApO1xyXG4gICAgICAgICAgICAgICAgbmVpZ2hib3VyaG9vZEludGVuc2l0aWVzLnB1c2goTWF0aC5hYnMoaW1hZ2VJbnRlbnNpdHlBcnJheVt4IC0gYm91bmRYXVt5IC0gYm91bmRZXSAtIGltYWdlSW50ZW5zaXR5QXJyYXlbeCArIGJvdW5kWF1beSArIGJvdW5kWV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gTWF0aC5tYXgoLi4ubmVpZ2hib3VyaG9vZEludGVuc2l0aWVzKTtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EnvironmentImage; });\nclass EnvironmentImage {\n  constructor(image, canvas) {\n    this.pixelArray = this.getPixelArray(image, canvas);\n    this.width = image.width;\n    this.height = image.height;\n    this.pixelAmount = Math.abs(this.width * this.height);\n    imageIntensityArray1d = this.getIntensityArray();\n    imageIntensityArray = this.convertTo2dMatrix(imageIntensityArray1d);\n  }\n\n  convertTo2dMatrix(array) {\n    const array2d = new Array(2);\n    let a = 0;\n\n    for (let y = 0; y < canvasHeight; y++) {\n      array2d[y] = [];\n\n      for (let x = 0; x < canvasWidth; x++) {\n        array2d[y][x] = array[a];\n        a++;\n      }\n    }\n\n    return array2d;\n  }\n\n  getIntensityArray() {\n    const intensityArray = [];\n\n    for (let i = 0; i <= this.pixelArray.length - 1; i++) {\n      if (i <= this.pixelArray.length - 2) {\n        const sum = this.pixelArray[i] + this.pixelArray[i + 1] + this.pixelArray[i + 2] + this.pixelArray[i + 3];\n        i += 3;\n        intensityArray.push(sum);\n      }\n    }\n\n    ;\n    return intensityArray;\n  }\n\n  getPixelArray(image, canvas) {\n    const ctx = canvas.getContext(\'2d\');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawImageProp(ctx, image, 0, 0, canvas.width, canvas.height);\n    global.imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    fadeImage();\n    return imgData.data;\n\n    function fadeImage() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.save();\n      ctx.globalAlpha = 0.5;\n      drawImageProp(ctx, image, 0, 0, canvas.width, canvas.height);\n      ctx.restore();\n    }\n\n    function drawImageProp(ctx, img, x, y, w, h, offsetX, offsetY) {\n      if (arguments.length === 2) {\n        x = y = 0;\n        w = ctx.canvas.width;\n        h = ctx.canvas.height;\n      } // default offset is center\n\n\n      offsetX = typeof offsetX === "number" ? offsetX : 0.5;\n      offsetY = typeof offsetY === "number" ? offsetY : 0.5; // keep bounds [0.0, 1.0]\n\n      if (offsetX < 0) offsetX = 0;\n      if (offsetY < 0) offsetY = 0;\n      if (offsetX > 1) offsetX = 1;\n      if (offsetY > 1) offsetY = 1;\n      const iw = img.width,\n            ih = img.height,\n            r = Math.min(w / iw, h / ih);\n      let nw = iw * r,\n          // new prop. width\n      nh = ih * r,\n          // new prop. height\n      cx,\n          cy,\n          cw,\n          ch,\n          ar = 1; // decide which gap to fill    \n\n      if (nw < w) ar = w / nw;\n      if (Math.abs(ar - 1) < 1e-14 && nh < h) ar = h / nh; // updated\n\n      nw *= ar;\n      nh *= ar; // calc source rectangle\n\n      cw = iw / (nw / w);\n      ch = ih / (nh / h);\n      cx = (iw - cw) * offsetX;\n      cy = (ih - ch) * offsetY; // make sure source rectangle is valid\n\n      if (cx < 0) cx = 0;\n      if (cy < 0) cy = 0;\n      if (cw > iw) cw = iw;\n      if (ch > ih) ch = ih; // fill image in dest. rectangle\n\n      ctx.drawImage(img, cx, cy, cw, ch, x, y, w, h);\n    }\n  }\n\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},function(Q,B,F){F(8),Q.exports=F(7)},function(module,exports,__webpack_require__){"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnNjc3M/OTJjYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/helpers/globals.js\nvar globals = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/components/aco/agent.js\nclass AntAgent {\n  constructor(canvas, coordinates) {\n    this.canvas = canvas;\n    this.startPostition = coordinates; // x,y coordinates <- this should be random\n\n    this.currentCoordinates = this.startPostition;\n    this.previousCoordinates = [];\n    this.agentSize = 1;\n  }\n\n  getRandomPosition() {\n    const x = Math.floor(Math.random() * this.canvas.width);\n    const y = Math.floor(Math.random() * this.canvas.height);\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  depositPheromone(coordinates) {\n    const medians = [];\n    coordinates.forEach(pixel => {\n      const matrixSize = pheromoneMatrix.length - 1,\n            x = pixel.x,\n            y = pixel.y,\n            neighbourIntensities = [];\n\n      for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n          const notOutOfBounds = x + i > -1 && x + i < matrixSize && y + j > -1 && y + j < matrixSize;\n\n          if (notOutOfBounds) {\n            neighbourIntensities.push(heuristicMatrix[x + i][y + j]);\n          }\n        }\n      }\n\n      medians.push(this.calcMedian(neighbourIntensities));\n    });\n    const medDiff = medians[0] - medians[1];\n    pheromoneMatrix[coordinates[0].x][coordinates[0].y] += medians[0] >= tNoiseFilt ? nConstPD + pConstPD * medDiff / 255 : 0;\n  }\n\n  calcMedian(arr) {\n    const mid = Math.floor(arr.length / 2),\n          nums = [...arr].sort((a, b) => a - b);\n    return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n  }\n\n  calculateNextStep() {\n    let currentMaxProbability = 0,\n        maxProbabilityIndex = 0,\n        sumProducts = 0,\n        visited = false;\n    const phProducts = [],\n          neighbourNodeCoordinates = [],\n          x = this.currentCoordinates.x,\n          y = this.currentCoordinates.y,\n          matrixSize = pheromoneMatrix.length - 1,\n          pCLen = this.previousCoordinates.length; // find the pheromone and heuristic product\n\n    for (let i = -1; i <= 1; i++) {\n      for (let j = -1; j <= 1; j++) {\n        const outOfBounds = x + i > -1 && x + i < matrixSize && y + j > -1 && y + j < matrixSize;\n        visited = false;\n\n        if (i !== 0 && j !== 0 && outOfBounds) {\n          for (let k = 1; k < (antMemLen > pCLen ? pCLen : antMemLen); k++) {\n            if (this.previousCoordinates[pCLen - k].x === x + i && this.previousCoordinates[pCLen - k].y === y + j) {\n              visited = true;\n              k = antMemLen + 1; // exit the loop to prevent agent looping\n            }\n          }\n\n          if (!visited) {\n            const productValue = Math.pow(pheromoneMatrix[x + i][y + j], alpha) * Math.pow(heuristicMatrix[x + i][y + j], beta);\n            phProducts.push(productValue); //find the sum of all products from the neighbourhood\n\n            sumProducts += productValue;\n          } else {\n            phProducts.push(\"visited\");\n          }\n\n          neighbourNodeCoordinates.push({\n            x: x + i,\n            y: y + j\n          });\n        }\n      }\n    } //find the maximum probability for next move\n\n\n    phProducts.forEach((product, i) => {\n      //check if not the previous pixel\n      let notPrevious = product !== \"visited\";\n      const result = sumProducts !== 0 && notPrevious ? Math.abs(product / sumProducts) : 0;\n\n      if (result > currentMaxProbability && notPrevious) {\n        currentMaxProbability = result;\n        maxProbabilityIndex = i;\n      }\n    });\n\n    if (currentMaxProbability === 0) {\n      maxProbabilityIndex = 99;\n    }\n\n    if (maxProbabilityIndex === 99) {\n      this.previousCoordinates = [];\n      const newPositions = this.getRandomPosition();\n      return {\n        newCoordinates: newPositions,\n        newAnt: true\n      };\n    } else return {\n      newCoordinates: neighbourNodeCoordinates[maxProbabilityIndex],\n      newAnt: false\n    };\n  }\n\n  moveTo(coordinates, newAnt) {\n    if (!newAnt) {\n      this.depositPheromone([this.currentCoordinates, coordinates]);\n      this.previousCoordinates.push(this.currentCoordinates);\n    } else this.previousCoordinates = [];\n\n    this.currentCoordinates = coordinates;\n  }\n\n}\n// EXTERNAL MODULE: ./src/helpers/matrix-helper.js\nvar matrix_helper = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./src/helpers/extras.js\nvar extras = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/components/aco/aco-algorithm.js\n\n\n\nclass aco_algorithm_ACO {\n  constructor(image, resultsGallery) {\n    this.image = image;\n    this.canvas = document.querySelector('#canvasFg');\n    this.canvasW = this.canvas.getBoundingClientRect().width;\n    this.canvasH = this.canvas.getBoundingClientRect().height;\n    this.canvasArea = this.canvasW * this.canvasH;\n    this.ctx = this.canvas.getContext(\"2d\"); //Get external classes\n\n    this.matrixHelper = new matrix_helper[\"a\" /* default */]();\n    this.resultsGallery = resultsGallery; //animation control variables\n\n    this.currentFrame = 1;\n    this.animationCount = 0;\n    this.agentCount = 0;\n    this.paused = false; // generate initial pheromone and heuristic matrices\n\n    this.matrixHelper.generateInitialMatrices();\n    this.iMax = this.matrixHelper.iMax;\n    this.setDefaultValues(); // set default values for the parameters\n    // Simulation stats\n\n    this.textIter = document.querySelector('#iter-text');\n    this.textCurr = document.querySelector('#curr-text');\n    this.textNew = document.querySelector('#new-text');\n    this.textX = document.querySelector('#x-text');\n    this.textY = document.querySelector('#y-text');\n  }\n\n  init() {\n    this.ctx.clearRect(0, 0, this.canvasW, this.canvasH);\n    this.updateGlobalParams();\n    this.initializeAgents();\n    this.currentFrame = 1;\n    this.animationIntervalId = null;\n  }\n\n  reset(full) {\n    clearInterval(this.animationIntervalId);\n    Object(extras[\"stopTimer\"])();\n    this.matrixHelper.resetPheromoneMatrix();\n\n    if (full === 'full') {\n      this.ctx.clearRect(0, 0, this.canvasW, this.canvasH);\n      this.currentFrame = 1;\n      this.animationIntervalId = null;\n    } else this.init();\n  }\n\n  stop() {\n    this.paused = true;\n    clearInterval(this.animationIntervalId);\n    Object(extras[\"stopTimer\"])('pause');\n  } //set default algorithm param values\n\n\n  setDefaultValues() {\n    this.defaultParams = {\n      'iterations': 3,\n      'antCount': Math.round(Math.sqrt(this.image.width * this.image.height)),\n      'numAntMov': Math.round(Math.round(3 * Math.sqrt(this.image.width * this.image.height))),\n      'antMemLen': Math.round(Math.sqrt(2 * (this.image.width + this.image.height))),\n      'nConstPD': 2,\n      'pConstPD': 10,\n      'tNoiseFilt': 0.1,\n      'roPEvRate': 0.02,\n      'alpha': 2,\n      'beta': 2\n    };\n    Object.keys(this.defaultParams).forEach(key => {\n      window[key] = Number(this.defaultParams[key]); // save the currently used vars globally \n\n      window.allUI[key].value = window[key];\n    });\n  }\n\n  updateGlobalParams() {\n    Object.keys(this.defaultParams).forEach(key => {\n      window[key] = Number(window.allUI[key].value);\n    });\n  }\n\n  initializeAgents() {\n    console.log('agentsCount', antCount);\n    console.log('Num Ant Movements:', numAntMov);\n    console.log('Ant memory length:', antMemLen);\n    const density = Math.round(this.canvasArea / antCount);\n    console.log('density', density);\n    console.log('cvw', this.canvasW);\n    this.agents = [];\n    console.log(\"%c pheromoneMatrix\", \"color: #24c95a\", pheromoneMatrix);\n\n    for (let i = 0; i < antCount; i++) {\n      const x = Math.floor(i * density / this.canvasW);\n      const y = i * density - x * this.canvasW;\n      this.agents[i] = new AntAgent(this.canvas, {\n        x: x,\n        y: y\n      });\n      this.ctx.fillRect(this.agents[i].currentCoordinates.y, this.agents[i].currentCoordinates.x, 2, 1);\n    }\n\n    console.log(\"%c Agents\", \"color: #24c95a\", this.agents);\n  }\n\n  startSimulation() {\n    console.log(\"%c Simulation start: \", \"color: #bada55\");\n    events.emit('start-simulation');\n    if (!this.paused) this.ctx.clearRect(0, 0, this.canvasW, this.canvasH);\n\n    if (animation) {\n      Object(extras[\"timer\"])(); // check if timer has been stopped\n\n      this.animationIntervalId = setInterval(this.animateMoves.bind(this), 1);\n    } else {\n      events.emit('simulation-without-animation');\n      setTimeout(() => this.noAnimationMoves(), 500);\n    }\n  }\n\n  noAnimationMoves() {\n    const start = Date.now();\n\n    for (this.currentFrame; this.currentFrame < iterations; this.currentFrame++) {\n      console.log(\"%c Iteration: \", \"color: #bada55\", this.currentFrame);\n      this.agents.forEach(agent => {\n        for (let i = 0; i < numAntMov; i++) {\n          const {\n            newCoordinates,\n            newAnt\n          } = agent.calculateNextStep();\n          agent.moveTo(newCoordinates, newAnt);\n          if (agent.currentCoordinates == undefined) console.log(\"faulty\", agent);\n          if (newAnt) i = numAntMov;\n        }\n      }); // update pheromone values\n\n      pheromoneMatrix.forEach((val, x) => {\n        val.forEach((arr, y) => {\n          this.updatePheromoneLevel(this.agents, x, y);\n        });\n      });\n    }\n\n    console.log(\"%c END ANIMATION\", \"color: #c92424\");\n    Object(extras[\"loadingBar\"])(iterations, iterations);\n    this.resultsGallery.createBinaryImage();\n    Object(extras[\"elapsedTime\"])(start, Date.now());\n    events.emit('simulation-complete');\n  }\n\n  animateMoves() {\n    const agent = this.agents[this.agentCount];\n    this.animationCount++;\n\n    if (this.animationCount >= numAntMov) {\n      Object(extras[\"loadingBar\"])(this.agentCount + (this.agents.length - 1) * (this.currentFrame - 1), (this.agents.length - 1) * iterations);\n      this.animationCount = 0;\n      this.agentCount++;\n    }\n\n    if (this.agentCount >= this.agents.length) {\n      // update pheromone values\n      pheromoneMatrix.forEach((val, y) => {\n        val.forEach((arr, x) => {\n          this.updatePheromoneLevel(this.agents, x, y);\n          this.ctx.fillStyle = `rgba(0, 255, 0, ${pheromoneMatrix[x][y]})`;\n          this.ctx.fillRect(y, x, 1, 1);\n        });\n      });\n\n      if (this.currentFrame >= iterations) {\n        console.log(\"%c END ANIMATION\", \"color: #c92424\");\n        Object(extras[\"stopTimer\"])(); // elapsedTime(start, Date.now());\n\n        this.resultsGallery.createBinaryImage();\n        clearInterval(this.animationIntervalId);\n        events.emit('simulation-complete');\n      } else {\n        console.log(\"%c Iteration: \", \"color: #bada55\", this.currentFrame);\n        this.currentFrame++;\n        this.agentCount = 0;\n        this.animationCount = 0;\n      }\n    } else {\n      const {\n        newCoordinates,\n        newAnt\n      } = agent.calculateNextStep();\n      agent.moveTo(newCoordinates, newAnt);\n      if (agent.currentCoordinates == undefined) console.log(\"faulty\", agent);\n\n      if (this.animationCount % 10 === 0) {\n        if (pheromoneMatrix[agent.currentCoordinates.x][agent.currentCoordinates.y] <= initialPheromoneValue) {\n          this.ctx.fillStyle = `rgba(66, 33, 123, 255)`;\n        } else {\n          this.ctx.fillStyle = `rgba(237, 0, 1, 255)`;\n        }\n\n        if (agent.previousCoordinates.length > 10) {\n          for (let k = 1; k < 10; k++) {\n            this.ctx.fillRect(agent.previousCoordinates[agent.previousCoordinates.length - k].y, agent.previousCoordinates[agent.previousCoordinates.length - k].x, 1, 1);\n          }\n        }\n\n        this.ctx.fillRect(agent.currentCoordinates.y, agent.currentCoordinates.x, 1, 1);\n      }\n\n      if (newAnt) {\n        this.animationCount = numAntMov; // checks if a new ant is generated and exits loop\n      }\n    }\n\n    if (agent !== undefined) {\n      this.textIter.value = this.currentFrame;\n      this.textCurr.value = this.agentCount;\n      this.textNew.value = this.animationCount;\n      this.textX.value = agent.currentCoordinates.x;\n      this.textY.value = agent.currentCoordinates.y;\n    }\n  }\n\n  updatePheromoneLevel(agents, x, y) {\n    let sumPheromone = 0;\n    agents.forEach(agent => {\n      if (agent.previousCoordinates[x] && agent.previousCoordinates[y]) {\n        sumPheromone += pheromoneMatrix[x][y] >= tNoiseFilt ? pheromoneMatrix[x][y] : 0;\n      }\n    });\n    const newPheromoneLevel = (1 - roPEvRate) * pheromoneMatrix[x][y] + sumPheromone;\n    pheromoneMatrix[x][y] = newPheromoneLevel;\n  }\n\n}\n// EXTERNAL MODULE: ./src/components/environment-image/environment-image.js\nvar environment_image = __webpack_require__(4);\n\n// CONCATENATED MODULE: ./src/components/results-gallery/results-gallery.js\nclass ResultsGallery {\n  constructor() {\n    const canvas = document.querySelector('#canvasFg');\n    this.canvasW = canvas.getBoundingClientRect().width;\n    this.canvasH = canvas.getBoundingClientRect().height;\n    this.resultDiv = document.querySelector(\".binary-canvas-holder\"); // select target div\n    // Set gallery controls\n\n    this.initGalleryControls();\n  }\n\n  initGalleryControls() {\n    this.resultDivOverlays = document.querySelector(\".overlays\");\n    this.leftArrow = document.querySelector(\".arrow.left\");\n    this.rightArrow = document.querySelector(\".arrow.right\");\n    this.itemCount = document.querySelector(\".item-count\");\n    this.paramDetailsButton = document.querySelector(\".param-details-button\");\n    this.paramDetails = document.querySelector(\".param-details\"); //create close button\n\n    this.paramDetailsCloseButton = document.createElement('button');\n    this.paramDetailsCloseButton.setAttribute('class', 'close-button');\n    this.paramDetailsCloseButton.innerHTML = 'x';\n    this.leftArrow.addEventListener('click', () => this.prevPage());\n    this.rightArrow.addEventListener('click', () => this.nextPage());\n    this.paramDetailsButton.addEventListener('click', () => this.toggleParamsPanel('open'));\n    this.paramDetailsCloseButton.addEventListener('click', () => this.toggleParamsPanel('close'));\n  }\n\n  createBinaryImage() {\n    const width = this.canvasW,\n          height = this.canvasH;\n    let buffer = new Uint8ClampedArray(width * height * 4);\n    const binaryCanvas = document.createElement(\"canvas\");\n    binaryCanvas.setAttribute(\"class\", \"binary-canvas\");\n    binaryCanvas.setAttribute(\"width\", width);\n    binaryCanvas.setAttribute(\"height\", height);\n    const binCtx = binaryCanvas.getContext(\"2d\");\n    pheromoneMatrix.forEach((arr, y) => {\n      arr.forEach((value, x) => {\n        if (value > initialPheromoneValue) {\n          const pos = (y * height + x) * 4;\n          const valueRGB = 0;\n          buffer[pos] = valueRGB; // some R value [0, 255]\n\n          buffer[pos + 1] = valueRGB; // some G value\n\n          buffer[pos + 2] = valueRGB; // some B value\n\n          buffer[pos + 3] = 255; // set alpha channel\n        }\n      });\n    }); // create imageData object\n\n    const idata = binCtx.createImageData(width, height); // set our buffer as source\n\n    idata.data.set(buffer); // update canvas with new data\n\n    binCtx.putImageData(idata, 0, 0); // hide previous canvas\n\n    if (this.resultDiv.lastChild) {\n      // this.resultDiv.lastChild.style.zIndex = -1;\n      this.resultDiv.lastChild.style.opacity = 0;\n    }\n\n    this.addToGallery(binaryCanvas);\n  }\n\n  addToGallery(binaryCanvas) {\n    if (this.resultDiv.childElementCount > 0) {\n      for (let item of this.resultDiv.children) {\n        item.style.opacity = 0;\n      }\n    } //add image canvas to array\n\n\n    this.resultDiv.appendChild(binaryCanvas); // store canvas positioning in gallery\n\n    pages.push(this.resultDiv.lastChild);\n    currentPage = pages.length - 1;\n    this.saveParams(); // save current simulation parameters\n\n    this.updatePreview(); // update the view of the gallery element\n  }\n\n  showControls() {\n    const childCount = this.resultDiv.childElementCount;\n    this.resultDivOverlays.style.display = 'block';\n    this.itemCount.innerHTML = `${currentPage + 1} / ${childCount}`;\n\n    switch (currentPage) {\n      case 0:\n        this.rightArrow.style.display = 'block';\n        this.leftArrow.style.display = 'none';\n        break;\n\n      case pages.length - 1:\n        this.leftArrow.style.display = 'block';\n        this.rightArrow.style.display = 'none';\n        break;\n\n      default:\n        this.leftArrow.style.display = 'block';\n        this.rightArrow.style.display = 'block';\n        break;\n    }\n\n    if (childCount === 1) {\n      this.rightArrow.style.display = 'none';\n      this.leftArrow.style.display = 'none';\n    }\n  }\n\n  updatePreview() {\n    if (previousPage > -1) pages[previousPage].style.opacity = 0;\n    pages[currentPage].style.opacity = 1;\n    this.showControls();\n    this.loadParams();\n  }\n\n  nextPage() {\n    // got o next page\n    if (currentPage < pages.length - 1) {\n      previousPage = currentPage;\n      currentPage++;\n    }\n\n    this.updatePreview();\n  }\n\n  prevPage() {\n    // go to previous page\n    if (currentPage > 0) {\n      previousPage = currentPage;\n      currentPage--;\n    }\n\n    this.updatePreview();\n  }\n\n  saveParams() {\n    const paramsToSave = []; // save current image parameters \n\n    Object.values(allUI).forEach(element => {\n      const elementObj = {};\n      elementObj.value = element.value;\n      elementObj.id = element.id;\n      elementObj.name = element.name;\n      paramsToSave.push(elementObj);\n    });\n    savedParams.push(paramsToSave);\n  }\n\n  loadParams() {\n    this.paramDetails.innerHTML = ''; // clear previous params\n    //loop through saved simulation parameters for the image in view and add them to the html element\n\n    savedParams[currentPage].forEach(element => {\n      const span = document.createElement('span');\n      span.setAttribute('class', 'param-details-element');\n      span.setAttribute('id', `${element.id}-saved`);\n      span.innerHTML = `${element.name}: ${element.value}`;\n      this.paramDetails.appendChild(span);\n    });\n    this.paramDetails.appendChild(this.paramDetailsCloseButton);\n  }\n\n  toggleParamsPanel(action) {\n    if (action === 'open') {\n      // Show/hide views\n      this.paramDetailsButton.style.display = 'none';\n      this.paramDetails.style.display = 'block';\n    } else {\n      // Show/hide views\n      this.paramDetailsButton.style.display = 'block';\n      this.paramDetails.style.display = 'none';\n    }\n  }\n\n}\n// CONCATENATED MODULE: ./src/app.js\n\nObject(globals[\"a\" /* default */])();\n\n\n\n //initialise classes\n\nconst app_resultsGallery = new ResultsGallery(); // get html elements\n\nconst body = document.querySelector('body');\nconst uploader = document.querySelector('#image-upload');\nconst app_image = document.querySelector('#image-source');\nconst imagePreview = document.querySelector('#image-preview');\nconst canvasBg = document.querySelector('#canvasBg');\nconst drawImageButton = document.querySelector('#draw-image-button');\nconst startSimulationButton = document.querySelector('#start-simulation');\nconst setDefaultsButton = document.querySelector('#defaults-button');\nconst loadingPulse = document.querySelector('.pulse');\nconst sysInfoPanel = document.querySelector('.sys-info-panel');\nconst simSettingsPanel = document.querySelector('.sim-settings-panel');\nconst legend = document.querySelector('.legend');\nconst processParams = document.querySelectorAll('.process-params>input');\nconst elapsedTime = document.querySelector('#elapsed-time');\nconst performanceDisclaimer = document.querySelector('.performance-disclaimer');\nconst pushBackScreen = document.querySelector('.push-back-screen'); // set variables\n\nlet envImage;\nlet algorithm;\nlet uploadedYet = false;\nlet inputsChanged = false; // Buttons and HTML events\n\nconst drawImageButtonDefaultText = 'Upload';\nconst drawImageButtonActiveText = 'Reset';\nconst context = canvasBg.getContext('2d'); //get canvasBg dimensions\n\ncanvasWidth = canvasBg.width;\ncanvasHeight = canvasBg.clientHeight; // Disable initial state of dynamic elements\n\nanimationElem.setAttribute('disabled', 'disabled');\ndisableInputs(true); // Image uploader input behaviour\n\nuploader.addEventListener('change', function () {\n  const file = this.files[0]; // Check if a file is uploaded\n\n  if (this.files && this.files.length > 0) {\n    const reader = new FileReader();\n    reader.addEventListener('load', function () {\n      app_image.setAttribute('src', this.result);\n      imagePreview.setAttribute('src', this.result);\n    });\n    reader.readAsDataURL(file);\n\n    if (uploadedYet) {\n      events.emit('revert-initial-state');\n    }\n\n    drawImageButton.removeAttribute('disabled');\n    drawImageButton.innerHTML = drawImageButtonDefaultText;\n    uploadedYet = true;\n  }\n}); // upload/reset button behaviour\n\ndrawImageButton.addEventListener('click', () => {\n  drawImageButton.blur();\n\n  if (drawImageButton.innerHTML === drawImageButtonActiveText) {\n    events.emit('reset');\n  } else if (app_image) {\n    envImage = new environment_image[\"a\" /* default */](app_image, canvasBg);\n    algorithm = new aco_algorithm_ACO(envImage, app_resultsGallery);\n    algorithm.reset();\n    startSimulationButton.removeAttribute('disabled');\n    drawImageButton.innerHTML = drawImageButtonActiveText;\n    animationElem.removeAttribute('disabled');\n    events.emit('drawn-image');\n  }\n}); // track user input changes and  \n\nObject.values(allUI).forEach(element => {\n  element.onchange = () => {\n    startSimulationButton.removeAttribute('disabled');\n    algorithm.reset();\n    inputsChanged = true;\n    toggleDefaulsButton();\n  };\n}); // start simulation button behaviour\n\nstartSimulationButton.addEventListener('click', () => {\n  startSimulationButton.setAttribute('disabled', 'disabled');\n  algorithm.updateGlobalParams(); // set global parameters based on user input\n\n  algorithm.startSimulation();\n}); // reset user inputs to default\n\nsetDefaultsButton.addEventListener('click', () => {\n  startSimulationButton.removeAttribute('disabled');\n  algorithm.setDefaultValues();\n  algorithm.reset();\n  inputsChanged = false;\n  toggleDefaulsButton();\n});\nloadingPulse.addEventListener('click', () => {\n  // pause simulation\n  events.emit('stop-simulation');\n}); // Events to trigger changes according to the program state //\n// Put system into intial state\n\nevents.on('revert-initial-state', () => {\n  events.emit('stop-simulation');\n  disableButtons();\n  resetInfoStats();\n  resetInputs();\n  algorithm.reset();\n}); // State of the program at simulation start\n\nevents.on('start-simulation', () => {\n  drawImageButton.removeAttribute('disabled');\n  setDefaultsButton.setAttribute('disabled', 'disabled');\n  startSimulationButton.style.display = 'none';\n  loadingPulse.style.display = 'block';\n  sysInfoPanel.setAttribute('open', 'open');\n  document.body.style.cursor = 'wait';\n  legend.style.display = 'block';\n  disableInputs('true');\n}); // Show loading screen when animation is disabled\n\nevents.on('simulation-without-animation', () => {\n  pushBackScreen.style.display = 'block';\n  body.style.overflow = 'hidden';\n  legend.style.display = 'none';\n}); // State of the program at simulation pause\n\nevents.on('stop-simulation', () => {\n  startSimulationButton.style.display = 'block';\n  startSimulationButton.removeAttribute('disabled');\n  loadingPulse.style.display = 'none';\n  document.body.style.cursor = 'auto';\n  algorithm.stop();\n}); // State of the program at simulation complete\n\nevents.on('simulation-complete', () => {\n  console.log('Simulation Complete'); // initial state of buttons\n\n  loadingPulse.style.display = 'none';\n  startSimulationButton.style.display = 'block';\n  startSimulationButton.setAttribute('disabled', 'disabled');\n  drawImageButton.setAttribute('active', 'active'); // return to main screen from loading\n\n  document.body.style.cursor = 'auto';\n  pushBackScreen.style.display = 'none';\n  body.style.overflow = 'auto'; // enable user inputs\n\n  disableInputs(false);\n  toggleDefaulsButton();\n});\nevents.on('drawn-image', () => {\n  drawImageButton.setAttribute('disabled', 'disabled');\n  simSettingsPanel.setAttribute('open', 'open');\n  disableInputs(false);\n});\nevents.on('reset', () => {\n  app_reset('full');\n});\nevents.on('animation-toggled', animate => {\n  performanceDisclaimer.style.display = !animate ? 'block' : 'none'; // show hide animation disclamer\n\n  app_reset();\n}); // Functions //\n\nfunction disableInputs(disabled) {\n  for (let item of allUI) {\n    if (disabled) item.setAttribute('disabled', 'disabled');else item.removeAttribute('disabled');\n  }\n}\n\nfunction app_reset(full = null) {\n  events.emit('stop-simulation');\n  resetInfoStats();\n\n  if (full) {\n    resetInputs();\n    algorithm.setDefaultValues();\n    legend.style.display = 'none';\n    toggleDefaulsButton();\n  }\n\n  algorithm.reset();\n  animationElem.removeAttribute('disabled');\n  events.emit('drawn-image');\n}\n\nfunction resetInputs() {\n  for (let item of allUI) {\n    item.value = 0;\n    item.setAttribute('disabled', 'disabled');\n  }\n\n  inputsChanged = false;\n  toggleDefaulsButton();\n}\n\nfunction toggleDefaulsButton() {\n  if (inputsChanged) setDefaultsButton.removeAttribute('disabled');else setDefaultsButton.setAttribute('disabled', 'disabled');\n}\n\nfunction resetInfoStats() {\n  for (let item of processParams) {\n    item.value = 0;\n  }\n\n  Object(extras[\"loadingBar\"])(0, 100);\n  elapsedTime.value = '0m 0s';\n  legend.style.display = 'none';\n}\n\nfunction disableButtons() {\n  drawImageButton.setAttribute('disabled', 'disabled');\n  startSimulationButton.setAttribute('disabled', 'disabled');\n  animationElem.setAttribute('disabled', 'disabled');\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n")}]);
!function(Q){var I={};function t(B){if(I[B])return I[B].exports;var g=I[B]={i:B,l:!1,exports:{}};return Q[B].call(g.exports,g,g.exports,t),g.l=!0,g.exports}t.m=Q,t.c=I,t.d=function(Q,I,B){t.o(Q,I)||Object.defineProperty(Q,I,{enumerable:!0,get:B})},t.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},t.t=function(Q,I){if(1&I&&(Q=t(Q)),8&I)return Q;if(4&I&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(t.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&I&&"string"!=typeof Q)for(var g in Q)t.d(B,g,function(I){return Q[I]}.bind(null,g));return B},t.n=function(Q){var I=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return t.d(I,"a",I),I},t.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},t.p="",t(t.s=4)}([function(module,exports){eval('/* -------------------------------------------------------------------------- */\n\n/*                              Helper functions                              */\n\n/* -------------------------------------------------------------------------- */\n\n/* ------------------------------- Loading bar ------------------------------ */\nfunction loadingBar(completed, total) {\n  const elem = document.getElementById("bar");\n  const elemText = document.getElementsByClassName("bar-percentage");\n  let width = completed / total * 100;\n\n  if (width >= 100) {\n    elem.style.width = Math.floor(width) + "%";\n    elemText[0].innerHTML = Math.floor(width) + "%";\n    elem.style.borderRadius = \'34px\'; // make bar into circle to fill the space\n\n    return;\n  } else {\n    elem.style.borderRadius = \'34px 0 0 34px\'; // have bar edges rounded and sharp\n\n    elem.style.width = Math.floor(width) + "%";\n    elemText[0].innerHTML = Math.floor(width) + "%";\n    width++;\n  }\n}\n/* ------------------------------ Elapsed time static ------------------------------ */\n// shows the elapsed time at the end of the algorithm, used when visualisations are off\n\n\nfunction elapsedTime(start, end) {\n  //get elapsed time from start to end\n  const elem = document.getElementById("elapsed-time");\n  let timeDiff = end - start; // get seconds \n\n  timeDiff /= 1000;\n  let seconds = Math.round(timeDiff); // get minutes\n\n  let minutes = 0;\n  minutes = Math.floor(seconds / 60); // reset seconds counter\n\n  if (seconds === 60) {\n    seconds = 0;\n  }\n\n  elem.value = `${minutes}m ${seconds}s`; // show the minutes and seconds\n}\n/* --------------------------- Elapsed time timer --------------------------- */\n// shows the current time of execution of the algorithm, used when visualisations are on\n// functions variables\n\n\nlet intervalId = null;\nlet totalTime = 0; // keeps the time so far\n\nlet diff = null; // diffrence between start and end times\n\nfunction timer() {\n  // count time\n  const elem = document.getElementById("elapsed-time");\n  let start = Date.now(); // start time\n\n  let minutes = Math.floor(totalTime / 60000);\n  let secondsSoFar = totalTime % 60000; // count loop with 1s interval (counts every second)\n\n  intervalId = setInterval(function () {\n    diff = secondsSoFar + Date.now() - start; // milliseconds elapsed since start\n\n    let seconds = Math.floor(diff / 1000); // in seconds\n\n    minutes += Math.floor(seconds / 60); // in minutes\n    // reset seconds counter\n\n    if (seconds >= 60) {\n      start = Date.now();\n      seconds = 0;\n      secondsSoFar = 0;\n    } // keep the time in case of a pause \n\n\n    totalTime = diff + minutes * 60000; // show the minutes and seconds\n\n    elem.value = `${minutes}m ${seconds}s`;\n  }, 1000);\n} // stop functionality\n\n\nfunction stopTimer(pause) {\n  // check if paused\n  if (pause !== \'pause\') totalTime = 0; // if not pause, resets the saved time\n\n  clearInterval(intervalId); // resets the count loop \n}\n/* -------------------------------------------------------------------------- */\n\n\nmodule.exports = {\n  loadingBar,\n  elapsedTime,\n  timer,\n  stopTimer\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return initGlobals; });\n/* -------------------------------------------------------------------------- */\n\n/*                            Global variables file                           */\n\n/* -------------------------------------------------------------------------- */\n// The following function returns all the global variables needed throughtout the script\nfunction initGlobals() {\n  /* ------------------------------ Events ----------------------------- */\n  // Set up events\n  const EventEmitter = __webpack_require__(5); // get the events library\n\n\n  const events = new EventEmitter(); // initialise the EventEmitter class\n\n  global.events = events; // used to call js events to better manage the stages of the program\n\n  /* ---------------------------- Matrices globals ---------------------------- */\n  //initialise global variables related to the matrices\n\n  global.imageIntensityArray1d = new Array();\n  global.imageIntensityArray = new Array();\n  global.pheromoneMatrix = new Array();\n  global.heuristicMatrix = new Array();\n  global.initialPheromoneValue = 0.0001;\n  /* ----------------------------- Canvas globals ----------------------------- */\n  // initialise canvases global variables\n\n  global.canvasWidth = 0;\n  global.canvasHeight = 0;\n  /* -------------------------- Visualisation states -------------------------- */\n  // get visualisation toggle status\n\n  global.toggleVisElem = document.getElementById('visualisation-toggle'); // select the toggle element\n\n  global.toggleVisLabel = document.querySelector('.visualisation-toggle_label'); // select the toggle label\n\n  toggleVisLabel.innerHTML = 'Visualisation on'; // set the initial label\n\n  global.visualisation = toggleVisElem.checked; // get initial toggle status (set in HTML)\n\n  toggleVisElem.addEventListener('click', e => {\n    visualisation = e.target.checked; // get the toggle status at change (turned on/off)\n\n    toggleVisLabel.innerHTML = `Visualisation ${visualisation ? 'on' : 'off'}`; // change toggle label\n\n    events.emit('visualisation-toggled', visualisation); // emit an event when the toggle is interacted with \n  });\n  /* ------------------------- Parameter fields values ------------------------ */\n\n  global.allUI = document.getElementsByClassName('ui-element'); //get all user input fields\n\n  global.autoFields = true; //check if user input values are changed by the user\n\n  global.currentParams = {}; // keeps all currently set user settings\n\n  /* ------------------------- Results Gallery global variables ------------------------- */\n\n  global.pages = []; // keeps record of all results\n\n  global.currentPage = 0; // keeps track of the currently viewed result\n\n  global.previousPage = -1; // last page viewed before the current one\n\n  global.savedParams = []; // keeps the used parameters for each result\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9nbG9iYWxzLmpzPzIyZDQiXSwibmFtZXMiOlsiaW5pdEdsb2JhbHMiLCJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiZXZlbnRzIiwiZ2xvYmFsIiwiaW1hZ2VJbnRlbnNpdHlBcnJheTFkIiwiQXJyYXkiLCJpbWFnZUludGVuc2l0eUFycmF5IiwicGhlcm9tb25lTWF0cml4IiwiaGV1cmlzdGljTWF0cml4IiwiaW5pdGlhbFBoZXJvbW9uZVZhbHVlIiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJ0b2dnbGVWaXNFbGVtIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInRvZ2dsZVZpc0xhYmVsIiwicXVlcnlTZWxlY3RvciIsImlubmVySFRNTCIsInZpc3VhbGlzYXRpb24iLCJjaGVja2VkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJ0YXJnZXQiLCJlbWl0IiwiYWxsVUkiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiYXV0b0ZpZWxkcyIsImN1cnJlbnRQYXJhbXMiLCJwYWdlcyIsImN1cnJlbnRQYWdlIiwicHJldmlvdXNQYWdlIiwic2F2ZWRQYXJhbXMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7O0FBQ0E7O0FBQ0E7QUFFQTtBQUNlLFNBQVNBLFdBQVQsR0FBdUI7QUFFdEM7QUFDSTtBQUNBLFFBQU1DLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyxDQUFELENBQTVCLENBSmtDLENBSU07OztBQUN4QyxRQUFNQyxNQUFNLEdBQUcsSUFBSUYsWUFBSixFQUFmLENBTGtDLENBS0M7O0FBRW5DRyxRQUFNLENBQUNELE1BQVAsR0FBZ0JBLE1BQWhCLENBUGtDLENBT1Y7O0FBRTVCO0FBRUk7O0FBQ0FDLFFBQU0sQ0FBQ0MscUJBQVAsR0FBK0IsSUFBSUMsS0FBSixFQUEvQjtBQUNBRixRQUFNLENBQUNHLG1CQUFQLEdBQTZCLElBQUlELEtBQUosRUFBN0I7QUFDQUYsUUFBTSxDQUFDSSxlQUFQLEdBQXlCLElBQUlGLEtBQUosRUFBekI7QUFDQUYsUUFBTSxDQUFDSyxlQUFQLEdBQXlCLElBQUlILEtBQUosRUFBekI7QUFDQUYsUUFBTSxDQUFDTSxxQkFBUCxHQUErQixNQUEvQjtBQUVKO0FBQ0k7O0FBQ0FOLFFBQU0sQ0FBQ08sV0FBUCxHQUFxQixDQUFyQjtBQUNBUCxRQUFNLENBQUNRLFlBQVAsR0FBc0IsQ0FBdEI7QUFFSjtBQUVJOztBQUNBUixRQUFNLENBQUNTLGFBQVAsR0FBdUJDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixzQkFBeEIsQ0FBdkIsQ0ExQmtDLENBMEJzQzs7QUFDeEVYLFFBQU0sQ0FBQ1ksY0FBUCxHQUF3QkYsUUFBUSxDQUFDRyxhQUFULENBQXVCLDZCQUF2QixDQUF4QixDQTNCa0MsQ0EyQjZDOztBQUMvRUQsZ0JBQWMsQ0FBQ0UsU0FBZixHQUEyQixrQkFBM0IsQ0E1QmtDLENBNEJhOztBQUMvQ2QsUUFBTSxDQUFDZSxhQUFQLEdBQXVCTixhQUFhLENBQUNPLE9BQXJDLENBN0JrQyxDQTZCWTs7QUFFOUNQLGVBQWEsQ0FBQ1EsZ0JBQWQsQ0FBK0IsT0FBL0IsRUFBeUNDLENBQUQsSUFBTztBQUMzQ0gsaUJBQWEsR0FBR0csQ0FBQyxDQUFDQyxNQUFGLENBQVNILE9BQXpCLENBRDJDLENBQ1Q7O0FBQ2xDSixrQkFBYyxDQUFDRSxTQUFmLEdBQTRCLGlCQUFpQkMsYUFBRCxHQUFrQixJQUFsQixHQUF3QixLQUFNLEVBQTFFLENBRjJDLENBRWlDOztBQUM1RWhCLFVBQU0sQ0FBQ3FCLElBQVAsQ0FBWSx1QkFBWixFQUFxQ0wsYUFBckMsRUFIMkMsQ0FHVTtBQUN4RCxHQUpEO0FBTUo7O0FBRUlmLFFBQU0sQ0FBQ3FCLEtBQVAsR0FBZVgsUUFBUSxDQUFDWSxzQkFBVCxDQUFnQyxZQUFoQyxDQUFmLENBdkNrQyxDQXVDNEI7O0FBQzlEdEIsUUFBTSxDQUFDdUIsVUFBUCxHQUFvQixJQUFwQixDQXhDa0MsQ0F3Q1I7O0FBQzFCdkIsUUFBTSxDQUFDd0IsYUFBUCxHQUF1QixFQUF2QixDQXpDa0MsQ0F5Q1A7O0FBRS9COztBQUVJeEIsUUFBTSxDQUFDeUIsS0FBUCxHQUFlLEVBQWYsQ0E3Q2tDLENBNkNmOztBQUNuQnpCLFFBQU0sQ0FBQzBCLFdBQVAsR0FBcUIsQ0FBckIsQ0E5Q2tDLENBOENWOztBQUN4QjFCLFFBQU0sQ0FBQzJCLFlBQVAsR0FBc0IsQ0FBQyxDQUF2QixDQS9Da0MsQ0ErQ1I7O0FBQzFCM0IsUUFBTSxDQUFDNEIsV0FBUCxHQUFxQixFQUFyQixDQWhEa0MsQ0FnRFQ7QUFDNUIsQyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdsb2JhbCB2YXJpYWJsZXMgZmlsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4vLyBUaGUgZm9sbG93aW5nIGZ1bmN0aW9uIHJldHVybnMgYWxsIHRoZSBnbG9iYWwgdmFyaWFibGVzIG5lZWRlZCB0aHJvdWdodG91dCB0aGUgc2NyaXB0XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbml0R2xvYmFscygpIHtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEV2ZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAgIC8vIFNldCB1cCBldmVudHNcbiAgICBjb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKTsgLy8gZ2V0IHRoZSBldmVudHMgbGlicmFyeVxuICAgIGNvbnN0IGV2ZW50cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTsgLy8gaW5pdGlhbGlzZSB0aGUgRXZlbnRFbWl0dGVyIGNsYXNzXG5cbiAgICBnbG9iYWwuZXZlbnRzID0gZXZlbnRzOyAvLyB1c2VkIHRvIGNhbGwganMgZXZlbnRzIHRvIGJldHRlciBtYW5hZ2UgdGhlIHN0YWdlcyBvZiB0aGUgcHJvZ3JhbVxuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE1hdHJpY2VzIGdsb2JhbHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gICAgLy9pbml0aWFsaXNlIGdsb2JhbCB2YXJpYWJsZXMgcmVsYXRlZCB0byB0aGUgbWF0cmljZXNcbiAgICBnbG9iYWwuaW1hZ2VJbnRlbnNpdHlBcnJheTFkID0gbmV3IEFycmF5KCk7XG4gICAgZ2xvYmFsLmltYWdlSW50ZW5zaXR5QXJyYXkgPSBuZXcgQXJyYXkoKTtcbiAgICBnbG9iYWwucGhlcm9tb25lTWF0cml4ID0gbmV3IEFycmF5KCk7XG4gICAgZ2xvYmFsLmhldXJpc3RpY01hdHJpeCA9IG5ldyBBcnJheSgpO1xuICAgIGdsb2JhbC5pbml0aWFsUGhlcm9tb25lVmFsdWUgPSAwLjAwMDE7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENhbnZhcyBnbG9iYWxzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gICAgLy8gaW5pdGlhbGlzZSBjYW52YXNlcyBnbG9iYWwgdmFyaWFibGVzXG4gICAgZ2xvYmFsLmNhbnZhc1dpZHRoID0gMDtcbiAgICBnbG9iYWwuY2FudmFzSGVpZ2h0ID0gMDtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gVmlzdWFsaXNhdGlvbiBzdGF0ZXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICAgIC8vIGdldCB2aXN1YWxpc2F0aW9uIHRvZ2dsZSBzdGF0dXNcbiAgICBnbG9iYWwudG9nZ2xlVmlzRWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aXN1YWxpc2F0aW9uLXRvZ2dsZScpOyAvLyBzZWxlY3QgdGhlIHRvZ2dsZSBlbGVtZW50XG4gICAgZ2xvYmFsLnRvZ2dsZVZpc0xhYmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZpc3VhbGlzYXRpb24tdG9nZ2xlX2xhYmVsJyk7IC8vIHNlbGVjdCB0aGUgdG9nZ2xlIGxhYmVsXG4gICAgdG9nZ2xlVmlzTGFiZWwuaW5uZXJIVE1MID0gJ1Zpc3VhbGlzYXRpb24gb24nOyAvLyBzZXQgdGhlIGluaXRpYWwgbGFiZWxcbiAgICBnbG9iYWwudmlzdWFsaXNhdGlvbiA9IHRvZ2dsZVZpc0VsZW0uY2hlY2tlZDsgLy8gZ2V0IGluaXRpYWwgdG9nZ2xlIHN0YXR1cyAoc2V0IGluIEhUTUwpXG5cbiAgICB0b2dnbGVWaXNFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgdmlzdWFsaXNhdGlvbiA9IGUudGFyZ2V0LmNoZWNrZWQ7IC8vIGdldCB0aGUgdG9nZ2xlIHN0YXR1cyBhdCBjaGFuZ2UgKHR1cm5lZCBvbi9vZmYpXG4gICAgICAgIHRvZ2dsZVZpc0xhYmVsLmlubmVySFRNTCA9IGBWaXN1YWxpc2F0aW9uICR7KHZpc3VhbGlzYXRpb24pID8gJ29uJzogJ29mZid9YCAvLyBjaGFuZ2UgdG9nZ2xlIGxhYmVsXG4gICAgICAgIGV2ZW50cy5lbWl0KCd2aXN1YWxpc2F0aW9uLXRvZ2dsZWQnLCB2aXN1YWxpc2F0aW9uKTsgLy8gZW1pdCBhbiBldmVudCB3aGVuIHRoZSB0b2dnbGUgaXMgaW50ZXJhY3RlZCB3aXRoIFxuICAgIH0pO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBhcmFtZXRlciBmaWVsZHMgdmFsdWVzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gICAgZ2xvYmFsLmFsbFVJID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndWktZWxlbWVudCcpOyAvL2dldCBhbGwgdXNlciBpbnB1dCBmaWVsZHNcbiAgICBnbG9iYWwuYXV0b0ZpZWxkcyA9IHRydWU7IC8vY2hlY2sgaWYgdXNlciBpbnB1dCB2YWx1ZXMgYXJlIGNoYW5nZWQgYnkgdGhlIHVzZXJcbiAgICBnbG9iYWwuY3VycmVudFBhcmFtcyA9IHt9OyAvLyBrZWVwcyBhbGwgY3VycmVudGx5IHNldCB1c2VyIHNldHRpbmdzXG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUmVzdWx0cyBHYWxsZXJ5IGdsb2JhbCB2YXJpYWJsZXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gICAgZ2xvYmFsLnBhZ2VzID0gW107IC8vIGtlZXBzIHJlY29yZCBvZiBhbGwgcmVzdWx0c1xuICAgIGdsb2JhbC5jdXJyZW50UGFnZSA9IDA7IC8vIGtlZXBzIHRyYWNrIG9mIHRoZSBjdXJyZW50bHkgdmlld2VkIHJlc3VsdFxuICAgIGdsb2JhbC5wcmV2aW91c1BhZ2UgPSAtMTsgLy8gbGFzdCBwYWdlIHZpZXdlZCBiZWZvcmUgdGhlIGN1cnJlbnQgb25lXG4gICAgZ2xvYmFsLnNhdmVkUGFyYW1zID0gW107IC8vIGtlZXBzIHRoZSB1c2VkIHBhcmFtZXRlcnMgZm9yIGVhY2ggcmVzdWx0XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EnvironmentImage; });\n/* -------------------------------------------------------------------------- */\n\n/*                       Image Environment data gatherer class                */\n\n/* -------------------------------------------------------------------------- */\nclass EnvironmentImage {\n  constructor(image, canvas) {\n    this.pixelArray = this.getPixelArray(image, canvas); // set image environment\n\n    this.width = image.width;\n    this.height = image.height;\n    this.pixelAmount = Math.abs(this.width * this.height); // get the pixel count in the given image\n\n    imageIntensityArray1d = this.getIntensityArray(); // get intensity data\n\n    imageIntensityArray = this.convertTo2dMatrix(imageIntensityArray1d); // transform intensity data from array into a matrix\n  }\n\n  convertTo2dMatrix(array) {\n    const array2d = new Array(2);\n    let a = 0;\n\n    for (let y = 0; y < canvasHeight; y++) {\n      array2d[y] = [];\n\n      for (let x = 0; x < canvasWidth; x++) {\n        array2d[y][x] = array[a];\n        a++;\n      }\n    }\n\n    return array2d;\n  }\n\n  getIntensityArray() {\n    // Get intensity data for every pixel by combining the 3 colour and 1 alpha channel values together\n    const intensityArray = [];\n\n    for (let i = 0; i <= this.pixelArray.length - 1; i++) {\n      if (i <= this.pixelArray.length - 2) {\n        const sum = this.pixelArray[i] + this.pixelArray[i + 1] + this.pixelArray[i + 2] + this.pixelArray[i + 3];\n        i += 3;\n        intensityArray.push(sum);\n      }\n    }\n\n    ;\n    return intensityArray;\n  }\n\n  getPixelArray(image, canvas) {\n    //get image pixel data \n    const ctx = canvas.getContext(\'2d\');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawImageProp(ctx, image, 0, 0, canvas.width, canvas.height);\n    global.imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    fadeImage();\n    return imgData.data;\n\n    function fadeImage() {\n      // fade image in the background \n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.save();\n      ctx.globalAlpha = 0.5;\n      drawImageProp(ctx, image, 0, 0, canvas.width, canvas.height);\n      ctx.restore();\n    }\n\n    function drawImageProp(ctx, img, x, y, w, h, offsetX, offsetY) {\n      // Resize image to fit in the canvas\n      if (arguments.length === 2) {\n        x = y = 0;\n        w = ctx.canvas.width;\n        h = ctx.canvas.height;\n      } // default offset is center\n\n\n      offsetX = typeof offsetX === "number" ? offsetX : 0.5;\n      offsetY = typeof offsetY === "number" ? offsetY : 0.5; // keep bounds [0.0, 1.0]\n\n      if (offsetX < 0) offsetX = 0;\n      if (offsetY < 0) offsetY = 0;\n      if (offsetX > 1) offsetX = 1;\n      if (offsetY > 1) offsetY = 1;\n      const iw = img.width,\n            ih = img.height,\n            r = Math.min(w / iw, h / ih);\n      let nw = iw * r,\n          // new prop. width\n      nh = ih * r,\n          // new prop. height\n      cx,\n          cy,\n          cw,\n          ch,\n          ar = 1; // decide which gap to fill    \n\n      if (nw < w) ar = w / nw;\n      if (Math.abs(ar - 1) < 1e-14 && nh < h) ar = h / nh; // updated\n\n      nw *= ar;\n      nh *= ar; // calc source rectangle\n\n      cw = iw / (nw / w);\n      ch = ih / (nh / h);\n      cx = (iw - cw) * offsetX;\n      cy = (ih - ch) * offsetY; // make sure source rectangle is valid\n\n      if (cx < 0) cx = 0;\n      if (cy < 0) cy = 0;\n      if (cw > iw) cw = iw;\n      if (ch > ih) ch = ih; // fill image in dest. rectangle\n\n      ctx.drawImage(img, cx, cy, cw, ch, x, y, w, h);\n    }\n  }\n\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(Q,I,t){t(7),Q.exports=t(6)},function(module,exports,__webpack_require__){"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnNjc3M/OTJjYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/helpers/globals.js\nvar globals = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/components/aco/agent.js\n/* -------------------------------------------------------------------------- */\n\n/*                                Agent object                                */\n\n/* -------------------------------------------------------------------------- */\nclass AntAgent {\n  constructor(canvas, coordinates) {\n    this.canvas = canvas;\n    this.startPostition = coordinates; // x,y coordinates from aco-algorithm.js\n\n    this.currentCoordinates = this.startPostition;\n    this.previousCoordinates = []; // used to store previours coordinates\n\n    this.agentSize = 1; // the agent size on the canvas (1 pixel for accuracy)\n  }\n\n  getRandomPosition() {\n    // calculate a random position for an agent on the canvas\n    const x = Math.floor(Math.random() * this.canvas.width);\n    const y = Math.floor(Math.random() * this.canvas.height);\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  depositPheromone(coordinates) {\n    // deposit pheromone at passed pixel\n    // the passed coordinates are the current and the just passed ones\n    // calculate the median intensities of the curent node and the passed node as well as the nodes from their neighbourhoods \n    const medians = [];\n    coordinates.forEach(pixel => {\n      const matrixSize = pheromoneMatrix.length - 1,\n            x = pixel.x,\n            y = pixel.y,\n            neighbourIntensities = [];\n\n      for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n          // canvas bounds\n          const notOutOfBounds = x + i > -1 && x + i < matrixSize && y + j > -1 && y + j < matrixSize; // get the neighbourhood intensity values\n\n          if (notOutOfBounds) {\n            neighbourIntensities.push(heuristicMatrix[x + i][y + j]);\n          }\n        }\n      }\n\n      medians.push(this.calcMedian(neighbourIntensities)); // calculate medians\n    }); //calculate the difference between the two median intensities \n\n    const medDiff = medians[0] - medians[1]; // calculate pheromone deposition at node\n    // based on equation 1 from Ricardo Contreras et al.'s (2013) article\n\n    pheromoneMatrix[coordinates[0].x][coordinates[0].y] += heuristicMatrix[coordinates[0].x][coordinates[0].y] >= tNoiseFilt ? nConstPD + pConstPD * medDiff / 255 : 0;\n  }\n\n  calcMedian(arr) {\n    // calculate medians\n    const mid = Math.floor(arr.length / 2),\n          nums = [...arr].sort((a, b) => a - b);\n    return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n  }\n\n  calculateNextStep() {\n    // get the next step an ant should move to\n    let currentMaxProbability = 0,\n        maxProbabilityIndex = 0,\n        sumProducts = 0,\n        visited = false; // phProducts stands for array of pheromone and heuristic products\n    // pCLen stands for the length of the previous coordinates array\n\n    const phProducts = [],\n          neighbourNodeCoordinates = [],\n          x = this.currentCoordinates.x,\n          y = this.currentCoordinates.y,\n          matrixSize = pheromoneMatrix.length - 1,\n          pCLen = this.previousCoordinates.length; // find the pheromone and heuristic product\n\n    for (let i = -1; i <= 1; i++) {\n      for (let j = -1; j <= 1; j++) {\n        // canvas bounds\n        const outOfBounds = x + i > -1 && x + i < matrixSize && y + j > -1 && y + j < matrixSize;\n        visited = false; // keep track of visited nodes\n        // calculate values for all nodes but the current one\n\n        if (i !== 0 && j !== 0 && outOfBounds) {\n          // see if a pixel is visited by checking the saved nodes in the ant's memory\n          // antMemLen defines how far back into the ants memory should be checked\n          for (let k = 1; k < (antMemLen > pCLen ? pCLen : antMemLen); k++) {\n            // check if a node is visited\n            if (this.previousCoordinates[pCLen - k].x === x + i && this.previousCoordinates[pCLen - k].y === y + j) {\n              visited = true; // mark as visited\n\n              k = antMemLen + 1; // exit the loop to prevent agent looping\n            }\n          }\n\n          if (!visited) {\n            // calculate the product of the pheromone and heuristic\n            // based on equation 4 from Liu and Fang's (2015) article \n            const productValue = Math.pow(pheromoneMatrix[x + i][y + j], alpha) * Math.pow(heuristicMatrix[x + i][y + j], beta);\n            phProducts.push(productValue); //find the sum of all products from the neighbourhood\n\n            sumProducts += productValue;\n          } else {\n            phProducts.push(\"visited\");\n          } // save all neighbourhood coordinates of a pixel \n\n\n          neighbourNodeCoordinates.push({\n            x: x + i,\n            y: y + j\n          });\n        }\n      }\n    } //find the maximum probability for next move\n\n\n    phProducts.forEach((product, i) => {\n      //check if not the previous pixel\n      let notPrevious = product !== \"visited\";\n      const result = sumProducts !== 0 && notPrevious ? Math.abs(product / sumProducts) : 0; // check if the result is bigger than the noise filter\n\n      if (result >= tNoiseFilt) {\n        if (result > currentMaxProbability && notPrevious) {\n          currentMaxProbability = result;\n          maxProbabilityIndex = i; // set the index of the neighbour with highest intensity\n        }\n      }\n    }); // check if there is no high probability and respawn ant\n\n    if (currentMaxProbability === 0) {\n      maxProbabilityIndex = 99;\n    } // respawn ant\n\n\n    if (maxProbabilityIndex === 99) {\n      this.previousCoordinates = []; // reset ant's memory\n\n      const newPositions = this.getRandomPosition(); // get new random coordinates for the ant's new position\n\n      return {\n        newCoordinates: newPositions,\n        newAnt: true\n      };\n    } else return {\n      newCoordinates: neighbourNodeCoordinates[maxProbabilityIndex],\n      newAnt: false\n    };\n  }\n\n  moveTo(coordinates, newAnt) {\n    // move ant to a new location\n    // check if ant is not respawned\n    if (!newAnt) {\n      this.depositPheromone([this.currentCoordinates, coordinates]);\n      this.previousCoordinates.push(this.currentCoordinates);\n    } else this.previousCoordinates = [];\n\n    this.currentCoordinates = coordinates; // move ant to new coordinates\n  }\n\n}\n// CONCATENATED MODULE: ./src/helpers/matrix-helper.js\n/* -------------------------------------------------------------------------- */\n\n/*                          Matrices helper functions                         */\n\n/* -------------------------------------------------------------------------- */\nclass MatrixHelper {\n  constructor() {\n    this.iMax = imageIntensityArray1d.reduce((a, b) => a + b) / imageIntensityArray1d.length; // get the mean value\n  }\n\n  generateInitialMatrices() {\n    // construct the initial matrices (2d arrays)\n    for (let x = 0; x < canvasHeight; x++) {\n      pheromoneMatrix[x] = [];\n      heuristicMatrix[x] = [];\n\n      for (let y = 0; y < canvasWidth; y++) {\n        pheromoneMatrix[x][y] = initialPheromoneValue;\n        heuristicMatrix[x][y] = this.heuristicInformationForPixel(x, y);\n      }\n    } // FOR DEBUGGING : Heuristuc matrix\n    // console.log('%c heuristicMatrix', 'color: #24c95a', heuristicMatrix); // print the matrix in the console\n\n  }\n\n  resetPheromoneMatrix() {\n    // reset the pheromone matrix to its initial state\n    for (let x = 0; x < canvasHeight; x++) {\n      pheromoneMatrix[x] = [];\n\n      for (let y = 0; y < canvasWidth; y++) {\n        pheromoneMatrix[x][y] = initialPheromoneValue;\n      }\n    }\n  }\n\n  heuristicInformationForPixel(x, y) {\n    // get the heuristic information for a given pixel\n    return 1 / this.iMax * this.getMaxIntensityValueForPixel(x, y);\n  }\n\n  getMaxIntensityValueForPixel(x, y) {\n    // calculate heuristic information for a pixel given its 5x5 neighbourhood\n    // based on equation 5 from Liu and Fang's (2015) article \n    const arrLength = imageIntensityArray.length - 1;\n    const neighbourhoodIntensities = []; // loop through the whole 5x5 neighbourhood\n\n    for (let u = 0; u <= 2; u++) {\n      for (let v = -2; v <= 2; v++) {\n        // bound limits\n        const boundX = x > 1 ? x < arrLength - 1 ? u : 0 : 0;\n        const boundY = y > 1 ? y < arrLength - 1 ? v : 0 : 0; // calculate values based on the mirror principle\n\n        neighbourhoodIntensities.push(Math.abs(imageIntensityArray[x - boundX][y - boundY] - imageIntensityArray[x + boundX][y + boundY]));\n      }\n    }\n\n    return Math.max(...neighbourhoodIntensities); // get the maximum intensity value from the pixel's neighbourhood\n  }\n\n}\n// EXTERNAL MODULE: ./src/helpers/extras.js\nvar extras = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/components/aco/aco-algorithm.js\n/* -------------------------------------------------------------------------- */\n\n/*                           ACO algorithm main file                          */\n\n/* -------------------------------------------------------------------------- */\n\n/* --------------------------------- Imports -------------------------------- */\n\n\n\n/* -------------------------------------------------------------------------- */\n\nclass aco_algorithm_ACO {\n  constructor(image, resultsGallery) {\n    /* ------------------------ Get environment settings ------------------------ */\n    this.image = image; // get uploaded image information\n\n    this.canvas = document.querySelector('#canvasFg'); // get the drawing layer of the canvas to preserve the background\n\n    this.canvasW = this.canvas.getBoundingClientRect().width; // get the canvas width\n\n    this.canvasH = this.canvas.getBoundingClientRect().height; // get the canvas height\n\n    this.canvasArea = this.canvasW * this.canvasH; // get canvas area\n\n    this.ctx = this.canvas.getContext(\"2d\"); // get the canvas context\n\n    /* -------------------------- Get external classes -------------------------- */\n\n    this.matrixHelper = new MatrixHelper(); // initialise the matrix helper \n\n    this.resultsGallery = resultsGallery; // get the already initialised results gallery class from app.js\n\n    /* --------------------- Visualisation control variables -------------------- */\n\n    this.currentFrame = 1; // set the current frame of the animation loop\n\n    this.animationCount = 0; // set the animation step of an ant\n\n    this.agentCount = 0; // set the currently drawn agent\n\n    this.paused = false; // true if the algorithm is paused\n\n    /* ------------ Generate initial pheromone and heuristic matrices ----------- */\n\n    this.matrixHelper.generateInitialMatrices(); // generate the initial matrices\n\n    /* ----------------- Set default user input values for image ---------------- */\n\n    this.setDefaultValues(); // set default values for the parameters\n\n    /* ---------------------------- Simulation stats ---------------------------- */\n\n    this.textIter = document.querySelector('#iter-text'); // current iteration\n\n    this.textCurr = document.querySelector('#ant-text'); // current ant\n\n    this.textNew = document.querySelector('#step-text'); // current step\n\n    this.textX = document.querySelector('#x-text'); // current x coordinate\n\n    this.textY = document.querySelector('#y-text'); // current y coordinate\n  }\n\n  init() {\n    // initialise - called when an image is uploaded\n    this.ctx.clearRect(0, 0, this.canvasW, this.canvasH); // refresh canvas\n\n    this.updateGlobalParams();\n    this.initializeAgents();\n    this.currentFrame = 1;\n    this.animationIntervalId = null;\n  }\n\n  reset(full) {\n    // reset the algorithm\n    clearInterval(this.animationIntervalId); // stop the animation loop\n\n    Object(extras[\"stopTimer\"])(); // stop elapsed time timer\n\n    this.matrixHelper.resetPheromoneMatrix(); // reset pheromone matrix\n\n    this.paused = false;\n\n    if (full === 'full') {\n      // reset fully - used when image is changed\n      this.ctx.clearRect(0, 0, this.canvasW, this.canvasH);\n      this.currentFrame = 1;\n      this.animationIntervalId = null;\n    } else this.init();\n  }\n\n  stop() {\n    // pause functionality\n    this.paused = true;\n    clearInterval(this.animationIntervalId);\n    Object(extras[\"stopTimer\"])('pause'); // pause elapsed time timer\n  }\n\n  setDefaultValues() {\n    //sets the default algorithm parameter values\n    this.defaultParams = {\n      'iterations': 3,\n      'antCount': Math.round(Math.sqrt(this.image.width * this.image.height)),\n      'numAntMov': Math.round(Math.round(3 * Math.sqrt(this.image.width * this.image.height))),\n      'antMemLen': Math.round(Math.sqrt(2 * (this.image.width + this.image.height))),\n      'nConstPD': 2,\n      'pConstPD': 10,\n      'tNoiseFilt': 0.1,\n      'roPEvRate': 0.02,\n      'alpha': 2,\n      'beta': 2\n    };\n    Object.keys(this.defaultParams).forEach(key => {\n      window[key] = Number(this.defaultParams[key]); // save the currently used vars globally \n\n      window.allUI[key].value = window[key];\n      window.allUI[key].placeholder = window[key];\n    });\n  }\n\n  updateGlobalParams() {\n    // updates the algorithm parameters according to user input\n    Object.keys(this.defaultParams).forEach(key => {\n      window[key] = Number(window.allUI[key].value);\n    });\n  }\n\n  initializeAgents() {\n    const density = Math.round(this.canvasArea / antCount); // calculates density at which ants should be positioned\n\n    this.agents = []; // initialise agents array\n    // FOR DEBUGGING : Pheromone matrix\n    // console.log(\"%c pheromoneMatrix\", \"color: #24c95a\", pheromoneMatrix); //show pheromone matrix in console log\n\n    this.ctx.fillStyle = `rgba(66, 33, 123, 255)`; // set style for ant agent colour\n\n    /* counts trough all the agents calculates each's position,\n    draws them on the canvas and adds them to the array of agents*/\n\n    for (let i = 0; i < antCount; i++) {\n      // calculate x and y coordinates to fit ants in a grid-like structure\n      const x = Math.floor(i * density / this.canvasW);\n      const y = i * density - x * this.canvasW; //initialise agen objec with coordinated coordinates\n\n      this.agents[i] = new AntAgent(this.canvas, {\n        x: x,\n        y: y\n      });\n      this.ctx.fillRect(this.agents[i].currentCoordinates.y, this.agents[i].currentCoordinates.x, 2, 1); // show agents on the canvas\n    } // FOR DEBUGGING : Array of agents\n    // console.log(\"%c Agents\", \"color: #24c95a\", this.agents); // show list of agents in console log\n\n  }\n\n  startSimulation() {\n    console.log(\"%c Simulation start: \", \"color: #bada55\"); // show simulation start in the browser console\n\n    events.emit('start-simulation'); // emit an event to mark the start of the simulation\n\n    if (!this.paused) this.ctx.clearRect(0, 0, this.canvasW, this.canvasH); // clears the canvas if the algorithm is restarted\n    // defines the way in which the algorithm will work, depending on the visualisation toggle\n\n    if (visualisation) {\n      Object(extras[\"timer\"])(); // check if timer has been stopped\n\n      this.animationIntervalId = setInterval(this.animateMoves.bind(this), 1); // starts the canvas drawing loop\n    } else {\n      events.emit('simulation-without-visualisation'); // emits an event to mark the start of the algorithm without visualisations, used to show the loading screen\n\n      setTimeout(() => this.noAnimationMoves(), 500); // start the algorithm with a javascript loop for faster performance\n    }\n  }\n\n  noAnimationMoves() {\n    const start = Date.now(); // mark the starting time of the algorithm\n    // start the construction process \n\n    for (this.currentFrame; this.currentFrame < iterations; this.currentFrame++) {\n      console.log(\"%c Iteration: \", \"color: #bada55\", this.currentFrame); // show the current iteration in the browser console\n      // ant movement for all agents\n\n      this.agents.forEach(agent => {\n        for (let i = 0; i < numAntMov; i++) {\n          const {\n            newCoordinates,\n            newAnt\n          } = agent.calculateNextStep();\n          agent.moveTo(newCoordinates, newAnt);\n          if (agent.currentCoordinates == undefined) console.log(\"faulty\", agent);\n          if (newAnt) i = numAntMov;\n        }\n      }); // update pheromone values after all ants have moved\n\n      pheromoneMatrix.forEach((val, x) => {\n        val.forEach((arr, y) => {\n          this.updatePheromoneLevel(this.agents, x, y);\n        });\n      });\n    }\n\n    console.log(\"%c Iteration: \", \"color: #bada55\", this.currentFrame); // show the current iteration in the browser console\n\n    console.log(\"%c END OF ALGORITHM\", \"color: #c92424\"); // indicate the end of the algorithm in the console\n\n    Object(extras[\"loadingBar\"])(iterations, iterations); // update the laoding bar status\n\n    Object(extras[\"elapsedTime\"])(start, Date.now()); // calculate the elapsed time\n\n    this.resultsGallery.createBinaryImage(); // trigger the creation of a result image\n\n    events.emit('simulation-complete'); // emit an event to mark the end of the simulation of the algorithm\n  }\n\n  animateMoves() {\n    // show visualisations\n    // as javascript loop occupies the whole event thread, animation of canvas elements is done in a functional programming way\n    const agent = this.agents[this.agentCount]; // get the current agent to draw\n\n    this.animationCount++; // necessary for the incrementation of drawing frame\n\n    if (this.animationCount >= numAntMov) {\n      // case if ant moves have finished\n      Object(extras[\"loadingBar\"])(this.agentCount + (this.agents.length - 1) * (this.currentFrame - 1), (this.agents.length - 1) * iterations); // update the loading bar\n\n      this.animationCount = 0; // reset the animation frame\n\n      this.agentCount++; // go to next agent\n    }\n\n    if (this.agentCount >= this.agents.length) {\n      // case if the agents have finished\n      // update pheromone values\n      pheromoneMatrix.forEach((val, y) => {\n        val.forEach((arr, x) => {\n          this.updatePheromoneLevel(this.agents, x, y);\n          this.ctx.fillStyle = `rgba(0, 255, 0, ${pheromoneMatrix[x][y]})`; // set style for high pheromone values after iteration\n\n          this.ctx.fillRect(y, x, 1, 1);\n        }); // high pheromone values in green \n      });\n\n      if (this.currentFrame >= iterations) {\n        // case if this was the last iteration\n        console.log(\"%c END ANIMATION\", \"color: #c92424\"); // Mark end of animation in the console\n\n        Object(extras[\"stopTimer\"])(); // stop elapsed time timer\n\n        this.resultsGallery.createBinaryImage(); // add the result to the gallery\n\n        clearInterval(this.animationIntervalId); // stop the animation loop\n\n        events.emit('simulation-complete'); // emit an event marking the end of the simulation of the algorithm\n      } else {\n        // case if the current iteration is finished and there are more left\n        this.currentFrame++; // go to next frame\n\n        this.agentCount = 0; // start from 1st agent\n\n        this.animationCount = 0; // refresh animation frames\n      }\n    } else {\n      const {\n        newCoordinates,\n        newAnt\n      } = agent.calculateNextStep(); // get the next ant move info\n\n      agent.moveTo(newCoordinates, newAnt); // move the agent to new location\n\n      if (this.animationCount % 10 === 0) {\n        //draw 10 pixel movements at once for faster visualisation\n        if (pheromoneMatrix[agent.currentCoordinates.x][agent.currentCoordinates.y] <= initialPheromoneValue) {\n          this.ctx.fillStyle = `rgba(66, 33, 123, 255)`; // set style for normal ant trails\n        } else {\n          this.ctx.fillStyle = `rgba(237, 0, 1, 255)`; // set style for high pheromone values\n        }\n\n        if (agent.previousCoordinates.length > 10) {\n          // draw 10 ant movements on canvas\n          for (let k = 1; k < 10; k++) {\n            this.ctx.fillRect(agent.previousCoordinates[agent.previousCoordinates.length - k].y, agent.previousCoordinates[agent.previousCoordinates.length - k].x, 1, 1);\n          }\n        } // draw current ant position\n\n\n        this.ctx.fillRect(agent.currentCoordinates.y, agent.currentCoordinates.x, 1, 1);\n      }\n\n      if (newAnt) {\n        this.animationCount = numAntMov; // checks if a new ant is generated and exits loop\n      }\n    }\n\n    if (agent !== undefined) {\n      // update the simulation information values\n      this.textIter.value = this.currentFrame;\n      this.textCurr.value = this.agentCount;\n      this.textNew.value = this.animationCount;\n      this.textX.value = agent.currentCoordinates.x;\n      this.textY.value = agent.currentCoordinates.y;\n    }\n  }\n\n  updatePheromoneLevel(agents, x, y) {\n    // update pheromone values according to equation with evaporation\n    let sumPheromone = 0;\n    agents.forEach(agent => {\n      if (agent.previousCoordinates[x] && agent.previousCoordinates[y]) {\n        sumPheromone += pheromoneMatrix[x][y] >= tNoiseFilt ? pheromoneMatrix[x][y] : 0;\n      }\n    });\n    const newPheromoneLevel = (1 - roPEvRate) * pheromoneMatrix[x][y] + sumPheromone;\n    pheromoneMatrix[x][y] = newPheromoneLevel;\n  }\n\n}\n// EXTERNAL MODULE: ./src/components/environment-image/environment-image.js\nvar environment_image = __webpack_require__(3);\n\n// CONCATENATED MODULE: ./src/components/results-gallery/results-gallery.js\n/* -------------------------------------------------------------------------- */\n\n/*                               Results gallery                              */\n\n/* -------------------------------------------------------------------------- */\nclass ResultsGallery {\n  constructor() {\n    const canvas = document.querySelector('#canvasFg');\n    this.canvasW = canvas.getBoundingClientRect().width;\n    this.canvasH = canvas.getBoundingClientRect().height;\n    this.resultDiv = document.querySelector(\".binary-canvas-holder\"); // select target div\n    // Set gallery controls\n\n    this.initGalleryControls();\n  }\n\n  initGalleryControls() {\n    // Overlay controls\n    this.resultDivOverlays = document.querySelector(\".overlays\");\n    this.leftArrow = document.querySelector(\".arrow.left\");\n    this.rightArrow = document.querySelector(\".arrow.right\");\n    this.itemCount = document.querySelector(\".item-count\");\n    this.paramDetailsButton = document.querySelector(\".param-details-button\");\n    this.paramDetails = document.querySelector(\".param-details\"); //create close button\n\n    this.paramDetailsCloseButton = document.createElement('button');\n    this.paramDetailsCloseButton.setAttribute('class', 'close-button');\n    this.paramDetailsCloseButton.innerHTML = 'x'; // button event listeners\n\n    this.leftArrow.addEventListener('click', () => this.prevPage());\n    this.rightArrow.addEventListener('click', () => this.nextPage());\n    this.paramDetailsButton.addEventListener('click', () => this.toggleParamsPanel('open'));\n    this.paramDetailsCloseButton.addEventListener('click', () => this.toggleParamsPanel('close'));\n  }\n\n  createBinaryImage() {\n    // Create a binary image from pheromone matrix information\n    const width = this.canvasW,\n          height = this.canvasH;\n    let buffer = new Uint8ClampedArray(width * height * 4); // used to hold canvas pixel informaition \n\n    const binaryCanvas = document.createElement(\"canvas\");\n    binaryCanvas.setAttribute(\"class\", \"binary-canvas\");\n    binaryCanvas.setAttribute(\"width\", width);\n    binaryCanvas.setAttribute(\"height\", height);\n    const binCtx = binaryCanvas.getContext(\"2d\");\n    pheromoneMatrix.forEach((arr, y) => {\n      arr.forEach((value, x) => {\n        // check if the pheromone intensity value is higher than the initial pheromone value to define drawing (black) or background colour (white)\n        const valueRGB = value > initialPheromoneValue ? 0 : 255;\n        const pos = (y * height + x) * 4; // positioning (multiplied by 4 as there are 4 values for each pixel - RGBA)\n\n        buffer[pos] = valueRGB; //  R value \n\n        buffer[pos + 1] = valueRGB; //  G value\n\n        buffer[pos + 2] = valueRGB; //  B value\n\n        buffer[pos + 3] = 255; // set alpha channel\n        // }\n      });\n    }); // create imageData object\n\n    const idata = binCtx.createImageData(width, height); // set our buffer as source\n\n    idata.data.set(buffer); // update canvas with new data\n\n    binCtx.putImageData(idata, 0, 0); // hide previous canvas\n\n    if (this.resultDiv.lastChild) {\n      this.resultDiv.lastChild.style.opacity = 0;\n    }\n\n    this.addToGallery(binaryCanvas); // add the binary image to the gallery\n  }\n\n  addToGallery(binaryCanvas) {\n    if (this.resultDiv.childElementCount > 0) {\n      for (let item of this.resultDiv.children) {\n        item.style.opacity = 0; // hide all previous gallery images\n\n        item.style.height = 0;\n      }\n    } //add binary image canvas to the HTML\n\n\n    this.resultDiv.appendChild(binaryCanvas); // store canvas and its position positioning in the global arrays\n\n    pages.push(this.resultDiv.lastChild);\n    currentPage = pages.length - 1;\n    this.saveParams(); // save current simulation parameters\n\n    this.updatePreview(); // update the view of the gallery element\n  }\n\n  showControls() {\n    // show overlay controls\n    const childCount = this.resultDiv.childElementCount;\n    this.resultDivOverlays.style.display = 'block';\n    this.itemCount.innerHTML = `${currentPage + 1} / ${childCount}`; // page numbers\n    // arrows behaviour\n\n    switch (currentPage) {\n      case 0:\n        // first image\n        this.rightArrow.style.display = 'flex';\n        this.leftArrow.style.display = 'none';\n        break;\n\n      case pages.length - 1:\n        // last image\n        this.leftArrow.style.display = 'flex';\n        this.rightArrow.style.display = 'none';\n        break;\n\n      default:\n        // all images in between\n        this.leftArrow.style.display = 'flex';\n        this.rightArrow.style.display = 'flex';\n        break;\n    }\n\n    if (childCount === 1) {\n      this.rightArrow.style.display = 'none';\n      this.leftArrow.style.display = 'none';\n    }\n  }\n\n  updatePreview() {\n    // update the image preview\n    if (previousPage > -1) {\n      pages[previousPage].style.opacity = 0;\n      pages[previousPage].style.height = 0;\n    }\n\n    pages[currentPage].style.opacity = 1;\n    pages[currentPage].style.height = '100%';\n    this.showControls();\n    this.loadParams(); // load saved params for image\n  }\n\n  nextPage() {\n    // go to next page\n    if (currentPage < pages.length - 1) {\n      previousPage = currentPage;\n      currentPage++;\n    }\n\n    this.updatePreview();\n  }\n\n  prevPage() {\n    // go to previous page\n    if (currentPage > 0) {\n      previousPage = currentPage;\n      currentPage--;\n    }\n\n    this.updatePreview();\n  }\n\n  saveParams() {\n    // save current image parameters \n    const paramsToSave = [];\n    Object.values(allUI).forEach((element, i) => {\n      const elementObj = {};\n      elementObj.value = element.value;\n      elementObj.id = element.id;\n      elementObj.name = element.name;\n      paramsToSave.push(elementObj);\n    });\n    savedParams.push(paramsToSave); // push to global array\n  }\n\n  loadParams() {\n    // load image parameters\n    this.paramDetails.innerHTML = ''; // clear previous params\n    //loop through saved simulation parameters for the image in view and add them to the html element\n\n    savedParams[currentPage].forEach(element => {\n      const span = document.createElement('span');\n      span.setAttribute('class', 'param-details-element');\n      span.setAttribute('id', `${element.id}-saved`);\n      span.innerHTML = `${element.name}: ${element.value}`;\n      this.paramDetails.appendChild(span);\n    });\n    this.paramDetails.appendChild(this.paramDetailsCloseButton);\n  }\n\n  toggleParamsPanel(action) {\n    // open the parameters overlay panel\n    if (action === 'open') {\n      // Show parameters\n      this.paramDetailsButton.style.display = 'none';\n      this.paramDetails.style.display = 'block';\n    } else {\n      // Hide parameters\n      this.paramDetailsButton.style.display = 'block';\n      this.paramDetails.style.display = 'none';\n    }\n  }\n\n}\n// CONCATENATED MODULE: ./src/app.js\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------------------------------------------------------- */\n\n/*                            Main JavaScript file                            */\n\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------------------------------------------------------- */\n\n/*                                   Imports                                  */\n\n/* -------------------------------------------------------------------------- */\n\nObject(globals[\"a\" /* default */])(); // initialise all global variables\n\n // aco algorithm file\n\n // image environment file\n\n\n // results gallery\n\n/* -------------------------------------------------------------------------- */\n\nconst app_resultsGallery = new ResultsGallery(); // initialise results gallery class\n\n/* -------------------------------------------------------------------------- */\n\n/*                                HTML elements                               */\n\n/* -------------------------------------------------------------------------- */\n\nconst body = document.querySelector('body');\nconst uploader = document.querySelector('#image-upload');\nconst app_image = document.querySelector('#image-source');\nconst imagePreview = document.querySelector('#image-preview');\nconst canvasBg = document.querySelector('#canvasBg');\nconst drawImageButton = document.querySelector('#draw-image-button');\nconst startSimulationButton = document.querySelector('#start-simulation');\nconst setDefaultsButton = document.querySelector('#defaults-button');\nconst loadingPulse = document.querySelector('.pulse');\nconst sysInfoPanel = document.querySelector('.sys-info-panel');\nconst simSettingsPanel = document.querySelector('.sim-settings-panel');\nconst legend = document.querySelector('.legend');\nconst processParams = document.querySelectorAll('.process-params>input');\nconst elapsedTime = document.querySelector('#elapsed-time');\nconst performanceDisclaimer = document.querySelector('.performance-disclaimer');\nconst pushBackScreen = document.querySelector('.push-back-screen');\nconst downloadButton = document.querySelector('.download-button');\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------------------------------------------------------- */\n\n/*                                  Variables                                 */\n\n/* -------------------------------------------------------------------------- */\n\nlet envImage;\nlet algorithm;\nlet uploadedYet = false;\nlet inputsChanged = false;\n/* ------------------------------- Button text ------------------------------ */\n\nconst drawImageButtonDefaultText = 'Upload';\nconst drawImageButtonActiveText = 'Reset';\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------------------------------------------------------- */\n\n/*                              Initial settings                              */\n\n/* -------------------------------------------------------------------------- */\n// Canvas dimensions\n\ncanvasWidth = canvasBg.width;\ncanvasHeight = canvasBg.clientHeight; // Disable initial state of dynamic elements\n\ntoggleVisElem.setAttribute('disabled', 'disabled');\ndisableInputs(true);\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------------------------------------------------------- */\n\n/*                               Main buttons behaviour                       */\n\n/* -------------------------------------------------------------------------- */\n\n/* --------------------- Image uploader input behaviour --------------------- */\n\nuploader.addEventListener('change', function () {\n  const file = this.files[0]; // Check if a file is uploaded\n\n  if (this.files && this.files.length > 0) {\n    const reader = new FileReader();\n    reader.addEventListener('load', function () {\n      app_image.setAttribute('src', this.result);\n      imagePreview.setAttribute('src', this.result);\n    });\n    reader.readAsDataURL(file);\n\n    if (uploadedYet) {\n      events.emit('revert-initial-state');\n    }\n\n    drawImageButton.removeAttribute('disabled');\n    drawImageButton.innerHTML = drawImageButtonDefaultText;\n    uploadedYet = true;\n  }\n});\n/* ---------------------- Upload/reset button behaviour --------------------- */\n\ndrawImageButton.addEventListener('click', () => {\n  drawImageButton.blur(); // remove focus\n\n  if (drawImageButton.innerHTML === drawImageButtonActiveText) {\n    events.emit('reset');\n  } else if (app_image) {\n    envImage = new environment_image[\"a\" /* default */](app_image, canvasBg); // initialise the image environment passing the uploaded image\n\n    algorithm = new aco_algorithm_ACO(envImage, app_resultsGallery); // initialise the algorithm (initialise its params only)\n\n    algorithm.reset(); // reset the algorithm to defaults\n\n    startSimulationButton.removeAttribute('disabled');\n    drawImageButton.innerHTML = drawImageButtonActiveText;\n    toggleVisElem.removeAttribute('disabled');\n    events.emit('drawn-image'); // send an event that the image is drawn on the canvas\n  }\n});\n/* ---------------------- track user input changes ---------------------- */\n\nconst userInputEventHandler = () => {\n  // actions for when a user inputs new data\n  startSimulationButton.removeAttribute('disabled');\n  algorithm.reset();\n  inputsChanged = true;\n  toggleDefaulsButton();\n};\n\nObject.values(allUI).forEach(element => {\n  // event listeners for change on value alteration\n  element.addEventListener('blur', e => {\n    if (e.target.value === '') e.target.value = e.target.placeholder;\n    algorithm.reset();\n    toggleDefaulsButton();\n  });\n  element.addEventListener('input', userInputEventHandler);\n  element.addEventListener('propertychange', userInputEventHandler); // for Firefox/Edge and IE9\n});\n/* -------------------- start simulation button behaviour ------------------- */\n\nstartSimulationButton.addEventListener('click', () => {\n  startSimulationButton.setAttribute('disabled', 'disabled');\n  algorithm.updateGlobalParams(); // set global parameters based on user input\n\n  algorithm.startSimulation();\n});\n/* ---------------------- reset user inputs to default ---------------------- */\n\nsetDefaultsButton.addEventListener('click', () => {\n  startSimulationButton.removeAttribute('disabled');\n  algorithm.setDefaultValues();\n  algorithm.reset();\n  inputsChanged = false;\n  toggleDefaulsButton();\n});\n/* ------------------- control pause button functionlaity ------------------- */\n\nloadingPulse.addEventListener('click', () => {\n  // pause simulation\n  events.emit('stop-simulation');\n});\n/* ---------------------- download button functionality --------------------- */\n\ndownloadButton.addEventListener('click', () => {\n  const currentCanvas = pages[currentPage];\n  const dataURL = currentCanvas.toDataURL('image/png');\n  downloadButton.download = 'outline.png';\n  downloadButton.href = dataURL;\n});\n/* -------------------------------------------------------------------------- */\n\n/*                           Program states controls                          */\n\n/* -------------------------------------------------------------------------- */\n// Event listeners to trigger changes according to the program state //\n\n/* ---------------------- Put system into intial state ---------------------- */\n\nevents.on('revert-initial-state', () => {\n  events.emit('stop-simulation');\n  disableButtons();\n  resetInfoStats();\n  resetInputs();\n  algorithm.reset();\n});\n/* ---------------- State of the program at simulation start ---------------- */\n\nevents.on('start-simulation', () => {\n  //limit interactivity during simulation execution\n  drawImageButton.removeAttribute('disabled');\n  setDefaultsButton.setAttribute('disabled', 'disabled'); // show pulsing button\n\n  startSimulationButton.style.display = 'none';\n  loadingPulse.style.display = 'block';\n  sysInfoPanel.setAttribute('open', 'open');\n  document.body.style.cursor = 'wait';\n  legend.style.display = 'block';\n  disableInputs('true');\n});\n/* ----------- Show loading screen when visualisation is disabled ----------- */\n\nevents.on('simulation-without-visualisation', () => {\n  pushBackScreen.style.display = 'block';\n  body.style.overflow = 'hidden';\n  legend.style.display = 'none';\n});\n/* ---------------- State of the program at simulation pause ---------------- */\n\nevents.on('stop-simulation', () => {\n  startSimulationButton.style.display = 'block';\n  startSimulationButton.removeAttribute('disabled');\n  loadingPulse.style.display = 'none';\n  document.body.style.cursor = 'auto';\n  algorithm.stop();\n});\n/* --------------- State of the program at simulation complete -------------- */\n\nevents.on('simulation-complete', () => {\n  // initial state of buttons\n  loadingPulse.style.display = 'none';\n  startSimulationButton.style.display = 'block';\n  startSimulationButton.setAttribute('disabled', 'disabled');\n  drawImageButton.setAttribute('active', 'active'); // return to main screen from loading\n\n  document.body.style.cursor = 'auto';\n  pushBackScreen.style.display = 'none';\n  body.style.overflow = 'auto'; // enable user inputs\n\n  disableInputs(false);\n  toggleDefaulsButton();\n});\n/* ---------------------- Program state on image upload --------------------- */\n\nevents.on('drawn-image', () => {\n  drawImageButton.setAttribute('disabled', 'disabled');\n  simSettingsPanel.setAttribute('open', 'open');\n  disableInputs(false);\n});\n/* -------------- Program state on visualisation toggle change -------------- */\n\nevents.on('visualisation-toggled', animate => {\n  performanceDisclaimer.style.display = !animate ? 'block' : 'none'; // show hide visualisation disclamer\n\n  app_reset();\n});\n/* --------------------------- Reset program state -------------------------- */\n\nevents.on('reset', () => {\n  app_reset('full');\n});\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------------------------------------------------------- */\n\n/*                                  Functions                                 */\n\n/* -------------------------------------------------------------------------- */\n\nfunction disableInputs(disabled) {\n  for (let item of allUI) {\n    if (disabled) item.setAttribute('disabled', 'disabled');else item.removeAttribute('disabled');\n  }\n}\n\nfunction app_reset(full = null) {\n  // reset program state (revert to initial state)\n  events.emit('stop-simulation');\n  resetInfoStats();\n\n  if (full) {\n    resetInputs();\n    algorithm.setDefaultValues();\n    legend.style.display = 'none';\n    toggleDefaulsButton();\n  }\n\n  algorithm.reset();\n  toggleVisElem.removeAttribute('disabled');\n  events.emit('drawn-image');\n}\n\nfunction resetInputs() {\n  // reset input values\n  for (let item of allUI) {\n    item.value = 0;\n    item.setAttribute('disabled', 'disabled');\n  }\n\n  inputsChanged = false;\n  toggleDefaulsButton();\n}\n\nfunction toggleDefaulsButton() {\n  // change user input parameters to their default values\n  if (inputsChanged) setDefaultsButton.removeAttribute('disabled');else setDefaultsButton.setAttribute('disabled', 'disabled');\n}\n\nfunction resetInfoStats() {\n  // reset simulation information values\n  for (let item of processParams) {\n    item.value = 0;\n  }\n\n  Object(extras[\"loadingBar\"])(0, 100);\n  elapsedTime.value = '0m 0s';\n  legend.style.display = 'none';\n}\n\nfunction disableButtons() {\n  // disable main controls buttons\n  drawImageButton.setAttribute('disabled', 'disabled');\n  startSimulationButton.setAttribute('disabled', 'disabled');\n  toggleVisElem.setAttribute('disabled', 'disabled');\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")}]);